WEBVTT

1
00:00:00.000 --> 00:00:04.799
MS Analytics Class 2021: Quite as nervous, as I was last week so we'll see how it goes.

2
00:00:06.240 --> 00:00:13.710
MS Analytics Class 2021: i'm going to start off with a brief review of the material that we've covered in the last session.

3
00:00:14.880 --> 00:00:15.870
MS Analytics Class 2021: So this is.

4
00:00:17.039 --> 00:00:18.000
MS Analytics Class 2021: Talking about.

5
00:00:19.350 --> 00:00:23.280
MS Analytics Class 2021: How to describe the different elements of an optimization model.

6
00:00:24.840 --> 00:00:31.860
MS Analytics Class 2021: So we kind of the diagram there shows you the role of the optimization model place it's.

7
00:00:33.300 --> 00:00:43.680
MS Analytics Class 2021: A way to model, the business problem and requires making some simplifying assumptions or approximations and, in many cases.

8
00:00:45.030 --> 00:00:56.850
MS Analytics Class 2021: optimization models, at one point we're probably done more, on paper, but now, with modeling languages we oftentimes will go straight to the computer and not even write down with the model is.

9
00:00:58.080 --> 00:01:05.340
MS Analytics Class 2021: what's the model has been formulated, we can solve it to come up with the best or optimal solution.

10
00:01:06.690 --> 00:01:20.730
MS Analytics Class 2021: In terms of the different parts of the model we talked about decision variables and what decision variables are is a way to encode the available actions into numeric values.

11
00:01:21.660 --> 00:01:35.310
MS Analytics Class 2021: And I mentioned that the reason that that's done is because most of the techniques for solving models are geometrically based so it kind of embeds our decisions in space.

12
00:01:36.630 --> 00:01:52.500
MS Analytics Class 2021: These can be either continuous, meaning that they can take on any values in some interval say or integer valued for presenting discrete choices, maybe at the far end of that we have binary variables, which are either zero or one.

13
00:01:54.780 --> 00:02:05.940
MS Analytics Class 2021: Then we have two other model elements that are based on kind of measures or scores associated with the decision variables constraints.

14
00:02:07.380 --> 00:02:24.360
MS Analytics Class 2021: capture requirements are restrictions by bounding either as an equation or an inequality some function of the decision variables and probably the kind of prototypical constraint, to think about would be something like a budget constraint.

15
00:02:25.590 --> 00:02:32.970
MS Analytics Class 2021: where you can spend no more than the amount, you have available, that would be an inequality constraint less than or equal to constraint.

16
00:02:34.860 --> 00:02:50.010
MS Analytics Class 2021: Then we have the objective, which is to minimize or maximize the value of an objective function that would be the best or optimal solution would be the solution that attains that best value.

17
00:02:50.940 --> 00:02:57.570
MS Analytics Class 2021: Again we're talking about a function of the decision variable so kind of some kind of measure or score associated with the decision variables.

18
00:02:58.860 --> 00:03:06.570
MS Analytics Class 2021: And you can think of this as say maximizing profit or minimizing costs it's kind of depends on the problem context.

19
00:03:07.470 --> 00:03:16.680
MS Analytics Class 2021: So those are the different elements of a mathematical optimization model, the decision variables, the constraints and the objective right, so we want to find.

20
00:03:17.100 --> 00:03:26.640
MS Analytics Class 2021: The feasible solution which is a solution that satisfies the constraints, has the best objective value that's what we mean by solving an optimization model.

21
00:03:28.110 --> 00:03:31.260
MS Analytics Class 2021: Right, so we looked at some some examples.

22
00:03:32.490 --> 00:03:51.450
MS Analytics Class 2021: kind of help reinforce the meaning of those different terms and we looked at a numerical example we solve it using calculus and we also sell that using pocket model right to give you a chance to kind of get your get your.

23
00:03:52.470 --> 00:04:01.890
MS Analytics Class 2021: hands dirty with the software package and we'll see pocket model again tonight with different types of optimization models.

24
00:04:03.120 --> 00:04:07.080
MS Analytics Class 2021: So we're, in particular, going to be talking about.

25
00:04:08.310 --> 00:04:20.550
MS Analytics Class 2021: linear programming models linear programming models, when I gave you the analogy, using the elevators where the simplest types of models and really we can solve very large models.

26
00:04:21.510 --> 00:04:30.090
MS Analytics Class 2021: Millions of decision variables hundreds of thousands of constraints and probably even bigger depending on the structure of the linear programming model.

27
00:04:31.980 --> 00:04:41.220
MS Analytics Class 2021: We don't have to know a whole lot about the ins and outs of the solver because the default settings will work to solve linear programming models and will solve the time.

28
00:04:42.390 --> 00:04:53.220
MS Analytics Class 2021: So we're going to learn much of the syntax of pocket model tonight in the context of linear programming models right so i'm gonna start off with.

29
00:04:54.480 --> 00:05:04.290
MS Analytics Class 2021: An introduction, where I take a small dimensional problem so that you can kind of see how things are working and we could.

30
00:05:04.860 --> 00:05:14.310
MS Analytics Class 2021: Actually, probably do the same thing with a three dimensional model, but once we get up to four dimensions we're not supposed to try and visualize that it's a mentally dangerous.

31
00:05:16.290 --> 00:05:31.290
MS Analytics Class 2021: So there are three algorithms to solve linear programming models and i'm going to show you how they work they're called the primal simplex algorithm the dual simplex algorithm and interior point algorithm.

32
00:05:31.890 --> 00:05:37.260
MS Analytics Class 2021: There are other algorithms that solve linear programming models, but these are the ones that are available in prop up model.

33
00:05:38.100 --> 00:05:49.110
MS Analytics Class 2021: Right and then we use proc up model to enter and solve a simple linear programming problem, and again I make the distinction I mentioned this in the previous lecture between a problem and a model.

34
00:05:49.800 --> 00:06:02.220
MS Analytics Class 2021: So a numerical problem might not represented business problem, but if I have a mathematical programming in this case a linear programming model of a business problem i'll try and refer to as a model, instead of a problem.

35
00:06:04.650 --> 00:06:18.450
MS Analytics Class 2021: So, if we take our definition of a mathematical optimization problem and specialized that to the case of linear programming then we'll see that we have.

36
00:06:19.500 --> 00:06:21.930
MS Analytics Class 2021: Okay do this more gracefully tonight.

37
00:06:24.120 --> 00:06:32.040
MS Analytics Class 2021: And our objective being linear is just a sums and multiples of the decision variables right that's a linear function of.

38
00:06:33.000 --> 00:06:44.190
MS Analytics Class 2021: More than more than one decision variable are constraints now because they're linear constraints correspond to a system of equations inequalities.

39
00:06:44.610 --> 00:06:59.310
MS Analytics Class 2021: Right, some of them may be greater than or equal to something else than or equal to some of them equations you can think of it in this in these terms as being represented by matrix sometimes called a constraint matrix and a.

40
00:07:01.770 --> 00:07:04.200
MS Analytics Class 2021: vector of right hand sides.

41
00:07:06.270 --> 00:07:14.280
MS Analytics Class 2021: But pocket model is not matrix based language just that, if you've seen it described in this way, it might be helpful for you to think of it in these terms.

42
00:07:15.000 --> 00:07:31.650
MS Analytics Class 2021: It is true, however, that the kind of the elemental operations that are used to solve mathematical optimization problems are solving systems of equations right, so there is matrix algebra kind of under the hood but we don't have to.

43
00:07:32.790 --> 00:07:37.170
MS Analytics Class 2021: Work with matrices to use mathematical optimization models.

44
00:07:39.600 --> 00:07:48.840
MS Analytics Class 2021: In terms of the upper and lower bounds they don't have to be present but commonly there are upper lower bounce probably the most common situation is.

45
00:07:49.140 --> 00:07:55.710
MS Analytics Class 2021: Decision variables that are non negative, in which case we'd have a lower bound of zero and an upper bound to plus infinity.

46
00:07:56.490 --> 00:08:11.910
MS Analytics Class 2021: When we get to the point of entering a model you don't have to say interest special key sequence for infinity or minus infinity we just wouldn't enter an upper or lower bound in that case because that's what the specialization to linear programming looks like.

47
00:08:13.500 --> 00:08:18.570
MS Analytics Class 2021: In terms of how that affects kind of the behavior of the model.

48
00:08:36.480 --> 00:08:42.840
MS Analytics Class 2021: These are characteristics of the linear programming problem or model.

49
00:08:45.090 --> 00:08:52.290
MS Analytics Class 2021: And I want to emphasize this, because when we're thinking about a linear programming model of a business problem these things may not be true of the business problem.

50
00:08:52.620 --> 00:09:01.140
MS Analytics Class 2021: But you want to understand that the model they're using has these properties so everything is proportional again if you think about our budget constraint.

51
00:09:02.160 --> 00:09:11.070
MS Analytics Class 2021: every item that we use contributes exactly the same amount to that budget right, we have the same type.

52
00:09:12.390 --> 00:09:15.930
MS Analytics Class 2021: So that means that there are no economies are just condoms and scale.

53
00:09:17.280 --> 00:09:24.510
MS Analytics Class 2021: Everything is strictly linear now that may not be true in your business problem, but it may not be an unreasonable assumption to make.

54
00:09:25.830 --> 00:09:31.050
MS Analytics Class 2021: The range that you're interested in, you can assume that everything is proportional.

55
00:09:32.280 --> 00:09:46.050
MS Analytics Class 2021: We also have an activity which means that if you look at the contributions of two decision variables they don't depend on the other decision variables value right they may be competing for the same resources.

56
00:09:47.250 --> 00:09:50.880
MS Analytics Class 2021: But it's not like kind of butter and Marjorie right.

57
00:09:52.110 --> 00:10:02.220
MS Analytics Class 2021: The visibility, we talked about, we say that the decision variables are continuous That means they can assume arbitrary values between the bounds.

58
00:10:02.850 --> 00:10:15.210
MS Analytics Class 2021: In the optimal solution certainty is a little strange to see here, but I just want to emphasize that we think about the linear programming model and I go back to the previous slide.

59
00:10:16.290 --> 00:10:25.650
MS Analytics Class 2021: What is the data here, so the data, the parameters that control the model are the objective function coefficients.

60
00:10:26.250 --> 00:10:33.570
MS Analytics Class 2021: The constraint coefficients and the limits and the upper and lower bounds now, you might have a model where.

61
00:10:34.440 --> 00:10:48.720
MS Analytics Class 2021: say, for example the right hand sides with limits here are just estimates and maybe however they're estimated you not only have an expected value, but you also have some kind of variance right.

62
00:10:50.610 --> 00:11:00.420
MS Analytics Class 2021: So you could think of them as kind of random variables you can't magically input those variances into the solver as part of your linear programming model.

63
00:11:00.870 --> 00:11:12.330
MS Analytics Class 2021: Because the linear programming model assumes that those limits are fixed not random quantities that's, not to say that you couldn't design a kind of more overreaching strategy.

64
00:11:12.810 --> 00:11:22.110
MS Analytics Class 2021: Where you sample from all of those distributions and solve many, many different linear programming models, but your basic linear programming model can't take.

65
00:11:24.060 --> 00:11:29.880
MS Analytics Class 2021: fuzzy ranges or variances or anything into account it assumes that all those parameters are fixed.

66
00:11:31.380 --> 00:11:35.610
MS Analytics Class 2021: Right, so let me give you a small example, but we can try and visualize some of the.

67
00:11:36.720 --> 00:11:48.090
MS Analytics Class 2021: Concepts here so i'm not saying this is related to business problem in any way, so we have a maximisation problem so we're maximizing the function of two decision variables X and y.

68
00:11:49.500 --> 00:12:03.180
MS Analytics Class 2021: So called X plus 19 why i'm going to show you some pictures of the set of feasible points and those pictures won't have the objective on them, so we want to kind of try and remember this part.

69
00:12:03.600 --> 00:12:11.730
MS Analytics Class 2021: The rest of the model will be seen in the pictures, so we have three general constraints that involve both decision variables.

70
00:12:12.360 --> 00:12:24.240
MS Analytics Class 2021: And then the decision variables are also non negative right so that's very common situation, so if we look at the constraints in here so by the constraints what we mean.

71
00:12:27.450 --> 00:12:38.190
MS Analytics Class 2021: Is the bounds, and the inequalities here then since it's a two dimensional space we can look at a graph of that feasible region.

72
00:12:40.050 --> 00:12:42.960
MS Analytics Class 2021: And I had that on the next slide oops.

73
00:12:44.280 --> 00:12:45.750
MS Analytics Class 2021: let's see if I can get rid of that.

74
00:12:49.140 --> 00:13:05.820
MS Analytics Class 2021: Now this is not something that's produced by profit model right I just figured out what those points were using some kind of graphing calculator and then created this picture and word, so this is not a feature of the software, but it will help us understand what's going on here.

75
00:13:07.530 --> 00:13:17.730
MS Analytics Class 2021: So we have the three general inequalities, you can see here there's two black lines and this red line here i've labeled them with the inequalities that they represent.

76
00:13:18.390 --> 00:13:38.760
MS Analytics Class 2021: So, if you look at, for example, X plus three Why is less than or equal to 25 if you look at the set of points that satisfies that exactly three x X plus three y is equal to 25 you get a line, and then the inequality, says the feasible points are the points below that line.

77
00:13:39.930 --> 00:13:50.790
MS Analytics Class 2021: Rather than the points that satisfied that inequality, but in order to be feasible for the linear programming model aims to satisfy all of the inequality, so you get the blue shaded area.

78
00:13:51.450 --> 00:13:58.980
MS Analytics Class 2021: As well as the boundary of that blue shaded area so that's the set of feasible points or what we call the feasible region right.

79
00:14:00.510 --> 00:14:11.550
MS Analytics Class 2021: Now the inequality three x plus four was less than equal before 20 i've drawn in a different color it's read to indicate that it is different than the others.

80
00:14:12.210 --> 00:14:21.720
MS Analytics Class 2021: We would call this inequality redundant, in other words it's not necessary to describe the feasible region it doesn't kind of.

81
00:14:22.050 --> 00:14:30.630
MS Analytics Class 2021: cut into any other points on the boundary right, so if we didn't have this inequality in our model, it would be the same set of feasible points right.

82
00:14:31.230 --> 00:14:37.050
MS Analytics Class 2021: a priori, we may not know that a constraint is redundant, so we can't just like get rid of them.

83
00:14:37.590 --> 00:14:49.890
MS Analytics Class 2021: testing to see if a constraint is redundant are not essentially a solving linear programming model so it's not worth our while to determine which inequalities are we're done so we just leave them in.

84
00:14:51.480 --> 00:15:05.880
MS Analytics Class 2021: This would help us illustrate that not all linear programming models have feasible solutions so let's say instead of less than or equal to 420 the inequality was greater than or equal to 420.

85
00:15:06.960 --> 00:15:12.870
MS Analytics Class 2021: Then it would be all of the blue points that are above or on the red line which would be no points.

86
00:15:13.380 --> 00:15:30.210
MS Analytics Class 2021: Right, so it is possible that a linear programming problem has no feasible solutions and therefore no optimal solutions, and we would hope that pocket model when we say solve we indicate to us somehow that the problem isn't feasible and, in fact, that is the case.

87
00:15:31.920 --> 00:15:33.150
MS Analytics Class 2021: All right, but so let's.

88
00:15:34.650 --> 00:15:46.050
MS Analytics Class 2021: not worry about flipping that inequality and let's look at the feasible region so any point in this blue region or on the boundary is feasible in particular.

89
00:15:46.530 --> 00:16:02.850
MS Analytics Class 2021: here's a feasible point not a tremendously quality, good quality point here the origin X zero y zero is feasible, but its objective value is zero so we can probably do better than that trying to maximize again.

90
00:16:03.930 --> 00:16:05.880
MS Analytics Class 2021: If I scoot on over to the right.

91
00:16:09.780 --> 00:16:12.450
MS Analytics Class 2021: sure what happened here there we go.

92
00:16:14.640 --> 00:16:32.400
MS Analytics Class 2021: This point here, which is X is 117 and y zero again, this is the y axis the vertical axis is considerably better so it's 1404 is its objective value, so this is a better point but not again maybe not the best point.

93
00:16:33.900 --> 00:16:42.810
MS Analytics Class 2021: Now, if we want to compare this day to that corner, right up here the upper left hand corner, to see if that point is better than this point.

94
00:16:43.320 --> 00:16:51.600
MS Analytics Class 2021: We can add in all of the points that have the same objective value as 117 and zero so that would be a line of points.

95
00:16:52.500 --> 00:17:04.350
MS Analytics Class 2021: And the equation of that line would be our objective function 12 X plus y is equal to 1404 So you can see, because that line cuts just below the point.

96
00:17:04.980 --> 00:17:23.490
MS Analytics Class 2021: that's going to have a better objective value right and, in fact, as you take this yellow line and sweep up from the lower left hand corner, all the way up, you can see, the last point we touch will be this point and that point is.

97
00:17:24.840 --> 00:17:41.430
MS Analytics Class 2021: The optimal solution so access 63 and why is 54 so for this particular problem that's the optimal solution but thinking of that as kind of a conceptually leads us to the conclusion that.

98
00:17:42.690 --> 00:18:01.980
MS Analytics Class 2021: A linear programming problem is always going to have a solution in these corners right, because if you think of sweeping align through this this this case a Polygon it's always going to leave at one of those points that will be the last point that it sees right.

99
00:18:03.180 --> 00:18:21.450
MS Analytics Class 2021: And those points have a special name in linear programming they're called extreme point solutions you can also think of them as kind of corner point solutions different people use that term as well, so it's true that a linear programming model always has a linear programming problem.

100
00:18:22.980 --> 00:18:32.580
MS Analytics Class 2021: always has an optimal solution that is an extreme point solution so that kind of you could think of it in one way is it reduces the search for optimal solutions.

101
00:18:33.030 --> 00:18:39.120
MS Analytics Class 2021: If we could somehow just list out all the extreme point solutions and compare them see which has the best objective value.

102
00:18:39.720 --> 00:18:56.610
MS Analytics Class 2021: We could solve solve the model in that way, but that's not necessarily the most efficient way to solve a problem, but we can make use of this property in kind of designing an algorithm or understanding how algorithms work to solve when you're programming models.

103
00:18:59.640 --> 00:18:59.970
MS Analytics Class 2021: Right.

104
00:19:01.050 --> 00:19:09.450
MS Analytics Class 2021: So we test your intuition here thinking in general terms to someone writes down a linear programming problem.

105
00:19:10.650 --> 00:19:25.470
MS Analytics Class 2021: What are the possible outcomes that it could have could have no optimal solutions could it have a unique optimal solution could it have more than one, but a finite number or an infinite number of optimal solutions.

106
00:19:27.150 --> 00:19:30.630
MS Analytics Class 2021: Now some of these are no brainers because I illustrated them right.

107
00:19:31.830 --> 00:19:39.420
MS Analytics Class 2021: When I reverse the red inequality that was the case with no optimal solutions, no feasible solutions, hence know optimal solutions.

108
00:19:40.950 --> 00:19:51.390
MS Analytics Class 2021: or current example maximizing 12 X plus y has a unique optimal solution so really the only question is whether those last two can occur.

109
00:19:52.710 --> 00:19:54.810
MS Analytics Class 2021: And just one or perhaps both.

110
00:19:56.280 --> 00:19:58.290
MS Analytics Class 2021: Right, so any chance to think about it.

111
00:19:59.730 --> 00:20:00.360
MS Analytics Class 2021: Again this.

112
00:20:01.620 --> 00:20:09.780
MS Analytics Class 2021: So someone's asking wouldn't it depend on the shape of the objective function well, the objective function is is linear right in a linear programming model.

113
00:20:19.680 --> 00:20:21.840
MS Analytics Class 2021: Okay, so someone's asking a question about.

114
00:20:22.920 --> 00:20:32.250
MS Analytics Class 2021: A point generates a rectangle are we always trying to maximize that rectangle I don't really understand what that question is asking if they want to clarify that's fine.

115
00:20:34.590 --> 00:20:53.100
MS Analytics Class 2021: Okay, so it turns out, in this case that the possible outcomes are a B and D, which is a little strange so either, it has no optimal solutions, a unique optimal solution or an infinite number of optimal solutions so.

116
00:20:54.660 --> 00:21:03.360
MS Analytics Class 2021: If you thought see was the answer your intuition may be good, in the sense that going back to the picture with extreme points solutions.

117
00:21:03.990 --> 00:21:15.750
MS Analytics Class 2021: A linear programming problem can have multiple extreme points that are optimal solutions Okay, but whenever you have two distinct points that are both optimal solutions.

118
00:21:16.320 --> 00:21:28.290
MS Analytics Class 2021: Then everything on the line that connects them is going to be feasible and have the same objective value so once you have to optimal solutions that are different, you have an infinite number of them.

119
00:21:29.190 --> 00:21:42.630
MS Analytics Class 2021: Now this, this is not a very interesting infinity it's not like the mandelbrot set it's very simple it's so this set of optimal solutions, maybe a point if it's unique or a line or in higher dimensional spaces.

120
00:21:43.260 --> 00:21:48.330
MS Analytics Class 2021: looks like the feasible region of a lower dimensional linear programming model.

121
00:21:49.470 --> 00:21:57.990
MS Analytics Class 2021: and, generally speaking, if we identify that a problem has multiple optimal solutions we don't necessarily.

122
00:21:59.220 --> 00:22:09.780
MS Analytics Class 2021: describe all of them, but we may want to explore the set of optimal solutions so we'll look at this as we go forward as an interesting question which is.

123
00:22:10.920 --> 00:22:18.870
MS Analytics Class 2021: Does my linear programming model have multiple optimal solutions so we'd like to be able to tell and then have some strategies for exploring.

124
00:22:19.950 --> 00:22:20.250
Okay.

125
00:22:21.450 --> 00:22:22.230
Gupta, Satyam: Dr hartman.

126
00:22:22.590 --> 00:22:36.570
Gupta, Satyam: Yes, I was imagining like if we have a staff same kind of reason fees will reason and then this optimal solution lies on only two vortex is that possible, or you are saying that that's not even like that case.

127
00:22:37.140 --> 00:22:42.840
MS Analytics Class 2021: starship so the the feasible region of a linear programming model is convex.

128
00:22:43.110 --> 00:22:45.690
Gupta, Satyam: So that's what I was again the starship.

129
00:22:45.870 --> 00:22:49.230
Gupta, Satyam: It got it cannot be concave anyhow like.

130
00:22:49.650 --> 00:22:51.750
MS Analytics Class 2021: You like it can.

131
00:22:52.020 --> 00:22:58.680
MS Analytics Class 2021: In with more general constraint functions, you could capture that but not for a linear programming model okay so.

132
00:22:59.310 --> 00:23:00.000
MS Analytics Class 2021: If you've ever.

133
00:23:01.050 --> 00:23:09.660
MS Analytics Class 2021: done role playing games, you know those crazy dice that are not six sided dice that like eight or 12 or 20.

134
00:23:10.320 --> 00:23:25.170
MS Analytics Class 2021: The feasible region of a three dimensional problem could look something like that so again it's it's it's a Polygon in higher dimensional spaces it's hard to kind of visualize what it is, but your intuition from two and three dimensions, will help you understand the process.

135
00:23:25.920 --> 00:23:26.310
Gupta, Satyam: Thank you.

136
00:23:26.610 --> 00:23:27.480
appreciate your.

137
00:23:28.620 --> 00:23:29.460
MS Analytics Class 2021: Alright, so.

138
00:23:30.150 --> 00:23:38.730
MS Analytics Class 2021: i'm going to go into studio and solve that linear programming problem and again it's a problem because it doesn't necessarily represent.

139
00:23:39.780 --> 00:23:44.160
MS Analytics Class 2021: A model of a business problem so let's see.

140
00:23:45.480 --> 00:23:46.740
MS Analytics Class 2021: Do disgracefully.

141
00:23:47.760 --> 00:23:50.400
MS Analytics Class 2021: Okay, so i'm in studio.

142
00:23:51.540 --> 00:23:58.680
MS Analytics Class 2021: and hopefully we're all able to get that working on your laptops because there is homework that is due next week.

143
00:23:59.760 --> 00:24:02.730
MS Analytics Class 2021: That will cover the material from both last week, and this week.

144
00:24:04.230 --> 00:24:11.550
MS Analytics Class 2021: So I am now in less than two so i'm going to go into the folder for lesson to in the demos.

145
00:24:12.750 --> 00:24:19.170
MS Analytics Class 2021: And what i'm interested in is called two dimensional dot SAS okay open era.

146
00:24:20.310 --> 00:24:34.050
MS Analytics Class 2021: This is probably model code that solves the linear programming problem that we saw on the slides and so i'll walking through the different remember they're called declaration statements.

147
00:24:35.280 --> 00:24:47.730
MS Analytics Class 2021: So i'm going to start to kind of coax you being structured in a way that you program these models so i'm going to card out separate sections for the different types of model elements.

148
00:24:48.570 --> 00:24:55.620
MS Analytics Class 2021: So in this case, when I declare the variables they're both non negative, so the way that the syntax works is there.

149
00:24:56.520 --> 00:25:01.110
MS Analytics Class 2021: And then, a comma separated list of the decision variables X and y.

150
00:25:01.950 --> 00:25:15.360
MS Analytics Class 2021: Together with what I like to think about as fun facts about the decision variables and, in this case the fun facts are that they have lower bounce okay so X is less than or equal to zero y is zero mean sorry they're both created.

151
00:25:16.380 --> 00:25:25.290
MS Analytics Class 2021: We might have a decision variable that was had both upper and lower bounds, and that would be entered into like this okay.

152
00:25:25.920 --> 00:25:36.810
MS Analytics Class 2021: You could enter the upper bound first, if you wanted to, and then the lower bound just fun facts it can be in any order, but in this case we don't have upper and lower bound so i'll just leave it like it is.

153
00:25:39.660 --> 00:25:51.060
MS Analytics Class 2021: Why i'm declaring the decision variables first is because the general syntax rolling out model is that you have to declare things before you use them or effort.

154
00:25:52.260 --> 00:26:09.090
MS Analytics Class 2021: So if I was to declare the objective before the decision variables, the compiler wouldn't understand that X and y are decision variables, so now once i've declared the decision variables, I can declare my objective and constraints, so my objective here Max 12 X plus.

155
00:26:10.590 --> 00:26:27.480
MS Analytics Class 2021: Remember that SAS syntax requires the asterisks for multiplication and so, if you don't include those asterisks you're likely to get a syntax error right, although I will show you something interesting about this problem if I leave out the first asterisk.

156
00:26:28.770 --> 00:26:30.540
MS Analytics Class 2021: 12 X is actually a constant.

157
00:26:32.910 --> 00:26:44.700
MS Analytics Class 2021: riddle me that 112 X is a constant hex So if you got rid of the asterisk you wouldn't get a syntax error, but you wouldn't be optimizing the objective function that you want to.

158
00:26:46.080 --> 00:26:46.740
MS Analytics Class 2021: Okay, so.

159
00:26:47.940 --> 00:27:02.340
MS Analytics Class 2021: it's a maximisation when you declare an objective function has to have a name we'll talk more about names of other model elements as we go along, but the objective functions name i've covered Z.

160
00:27:04.140 --> 00:27:14.190
MS Analytics Class 2021: My constraints I use Khan, to declare constraints so even seen objective and variable declaration statements before but not constraint declaration statements.

161
00:27:15.360 --> 00:27:28.290
MS Analytics Class 2021: You can have a comma separated list of constraints, but constraints take up more space to declare so generally we just put each constraint on a separate line you don't necessarily need to.

162
00:27:29.520 --> 00:27:39.300
MS Analytics Class 2021: So we have we can think of as the body of the constraint okay that's defined that by that function of the decision variables and compared to a limit.

163
00:27:40.350 --> 00:27:46.050
MS Analytics Class 2021: and using a relation, so in this case, we all have less than or equal to constraints.

164
00:27:48.510 --> 00:27:54.990
MS Analytics Class 2021: It might be the case that you have a function that's between two bounds.

165
00:27:56.460 --> 00:28:11.610
MS Analytics Class 2021: such as this kind of sandwiched between two values, you can have constraints like that in a linear programming model, and this is how you would enter it in profit model, this is called a range constraint, because there's a range of values that that function can take on.

166
00:28:13.290 --> 00:28:22.440
MS Analytics Class 2021: The syntax is a little bit different from the way that we do the variable bounce because the compiler there is expecting the name of the variable followed by some fun facts.

167
00:28:23.040 --> 00:28:37.500
MS Analytics Class 2021: Now the compiler knows the names of the decision variables and it's looking for kind of general forums of constraints that needed rules and this range constraint here meets its patterns and knows how to parse that.

168
00:28:38.640 --> 00:28:41.820
MS Analytics Class 2021: Again, our problem doesn't have a range constraints on the ticket back out.

169
00:28:44.010 --> 00:28:51.330
MS Analytics Class 2021: Once i've declared my model elements have solved the model and that produces a problem and solution summary table.

170
00:28:51.810 --> 00:29:01.170
MS Analytics Class 2021: doesn't print out the names of the values of the decision variable so separately i've included a print statement, as we did before so i'm going to go ahead and just submit the Program.

171
00:29:02.340 --> 00:29:04.050
MS Analytics Class 2021: Make sure that nothing is highlighted.

172
00:29:06.630 --> 00:29:15.660
MS Analytics Class 2021: So, as I mentioned yesterday, if there's an error it pops up the log the fact that it popped up the results is a good sign, so I didn't have any syntax errors.

173
00:29:16.500 --> 00:29:31.410
MS Analytics Class 2021: So the problem summary describes the problem at a high level how many variables now, you can see that we have a problem that has constraints it's telling you which different kinds of constraints, a linear range constraint is the sandwich constraint.

174
00:29:33.480 --> 00:29:49.320
MS Analytics Class 2021: The number of constraint coefficients is in some way related to a measure of sparsity of the problem, generally speaking, you don't really need to know that but someone might be interested if you have a very large linear programming model about.

175
00:29:50.550 --> 00:30:02.580
MS Analytics Class 2021: How sparse it is, in other words, if you took the constraint matrix and looked at the non zeros how that relates to the total number of possible constraint coefficients.

176
00:30:04.350 --> 00:30:08.430
MS Analytics Class 2021: Okay, and I said that most problems in practice are are sparse.

177
00:30:09.450 --> 00:30:18.810
MS Analytics Class 2021: We also have a solution summary Now you can just page down or you can use the table of contents right, so I can go to the solution summary here.

178
00:30:20.130 --> 00:30:21.210
MS Analytics Class 2021: So this tells you.

179
00:30:22.500 --> 00:30:29.250
MS Analytics Class 2021: that it was a linear programming model so it's choosing the solver for that class of models.

180
00:30:30.300 --> 00:30:40.080
MS Analytics Class 2021: From that solver It shows an algorithm the algorithm it uses called a dual simplex found an optimal solution reports, the objective value.

181
00:30:40.680 --> 00:30:55.260
MS Analytics Class 2021: some kind of quality measures of the solution primal and feasibility doesn't satisfy the constraints bound in feasibility as satisfy the variable bounds and dual and feasibility is a little tricky and we're going to punt on okay.

182
00:30:56.880 --> 00:31:06.600
MS Analytics Class 2021: Number of iterations are kind of like big steps in the algorithm and you can think of each one of these iterations as.

183
00:31:07.650 --> 00:31:26.190
MS Analytics Class 2021: Solving a system of equations and then some bookkeeping Okay, and this is a small problem and didn't take any time hardly at all, and the values, you can see, of X and y are 63 and 54 which is reassuring, because in the slides I showed you that that was the optimal solution.

184
00:31:28.260 --> 00:31:35.430
MS Analytics Class 2021: Now proc up model shows this duel simplex algorithm because it's the default algorithm for solving linear programming models.

185
00:31:36.120 --> 00:31:51.690
MS Analytics Class 2021: If I wanted to choose a different algorithm I could specify that in the code by saying so, with LP that specifies that i'm using the LP solver seems appropriate since it's a linear programming model.

186
00:31:52.530 --> 00:32:00.780
MS Analytics Class 2021: But in order to give solver options, I have to actually name the solver so I have to say, solve with LP.

187
00:32:01.710 --> 00:32:12.960
MS Analytics Class 2021: The solver option that i'm interested in chooses a different algorithm so it's algorithm equals and dual simplex is the default, that would be a silly choice to make.

188
00:32:13.710 --> 00:32:27.660
MS Analytics Class 2021: The other algorithm that has a similar name is called primal simplex I can abbreviate that as PS, I could also have typed out primal underscore simplex but PS is a little easier to type if you're challenged, as I am.

189
00:32:28.950 --> 00:32:31.470
MS Analytics Class 2021: And then i'm going to go ahead and run the code again.

190
00:32:32.670 --> 00:32:33.810
MS Analytics Class 2021: it's all submitted.

191
00:32:36.480 --> 00:32:38.370
MS Analytics Class 2021: And to the results.

192
00:32:39.540 --> 00:32:48.300
MS Analytics Class 2021: I haven't changed the problems the problem summary is the same at the solution summary, if we look at it now tells me that I use the primal simplex algorithm right.

193
00:32:49.350 --> 00:32:56.310
MS Analytics Class 2021: It still found an optimal solution we know that's a unique optimal solution, so it should not be a surprise that it found Sim solution.

194
00:32:57.330 --> 00:33:00.360
MS Analytics Class 2021: Coincidentally, it took the same number of iterations.

195
00:33:03.270 --> 00:33:05.880
MS Analytics Class 2021: And you can see there that's the solution found.

196
00:33:06.900 --> 00:33:16.680
MS Analytics Class 2021: There is another algorithm we could call and that algorithm is called the interior point algorithm or created IP or IP.

197
00:33:17.670 --> 00:33:28.650
MS Analytics Class 2021: Now this algorithm has kind of a cleanup stage, so it finds an optimal solution and that optimal solution isn't necessarily.

198
00:33:29.010 --> 00:33:42.000
MS Analytics Class 2021: An extreme point solution, so it has a cleanup phase where it pushes it into one of the corners and that's called crossover and if I want to turn that off to look at a simple case, I can say cross over.

199
00:33:43.680 --> 00:33:46.080
MS Analytics Class 2021: crossover equals off.

200
00:33:47.490 --> 00:33:51.510
MS Analytics Class 2021: I believe you can also say zero in that case so.

201
00:33:53.160 --> 00:33:57.090
MS Analytics Class 2021: This is looking without that special cleanup phase.

202
00:33:58.290 --> 00:34:02.820
MS Analytics Class 2021: So the solution summary, you can see it use the interior interior point algorithm.

203
00:34:03.840 --> 00:34:09.360
MS Analytics Class 2021: It found the same solution in a slightly larger number of iterations.

204
00:34:10.380 --> 00:34:13.080
MS Analytics Class 2021: Again, we see a little bit more information.

205
00:34:14.100 --> 00:34:29.130
MS Analytics Class 2021: there's new information about something called a duality gap and complementarity, those are notions, there are from nonlinear programming models, this is an approach based on algorithms for solving non linear programming models.

206
00:34:30.540 --> 00:34:31.020
MS Analytics Class 2021: So.

207
00:34:32.820 --> 00:34:42.630
MS Analytics Class 2021: It took five iterations but we might be comparing apples to oranges, to say that it took five iterations, which means it took longer than the other two that only took three.

208
00:34:42.990 --> 00:34:53.970
MS Analytics Class 2021: Each of them is doing slightly different work in each iteration so this might in fact be faster, but for a small problem like this everything solved in 0.00 seconds it's hard to compare one to the other.

209
00:34:55.140 --> 00:35:16.020
MS Analytics Class 2021: For a larger model, you might find some more significant differences, now the reason that the dual simplex algorithm is the default is generally speaking it's the fastest so for most problems that people want to solve the dual simplex is the fastest algorithm so it's chosen by default.

210
00:35:17.190 --> 00:35:25.410
MS Analytics Class 2021: You might stumble upon a class of problems in your area of expertise for which one of the other algorithms is faster.

211
00:35:26.010 --> 00:35:38.580
MS Analytics Class 2021: So you could test for some sample problems and see if the other algorithms were better and then adopt them as default for that special class of problems that you're interested in solving.

212
00:35:39.270 --> 00:35:50.610
MS Analytics Class 2021: Okay, so that's that's the scenario where you might actually want to use one or the other of those it's also possible to use them all at once.

213
00:35:51.660 --> 00:35:58.050
MS Analytics Class 2021: So if I go back to the code here and I put algorithm equals concurrent.

214
00:36:01.110 --> 00:36:10.410
MS Analytics Class 2021: Then, assuming that we have enough processors it's going to divide the work up between the processors and use all of the algorithms.

215
00:36:11.490 --> 00:36:15.270
MS Analytics Class 2021: Okay, so if you have the processors.

216
00:36:16.680 --> 00:36:21.930
MS Analytics Class 2021: And you want to kind of do the comparison you can go ahead and run it here, look at the solution summary.

217
00:36:22.410 --> 00:36:28.860
MS Analytics Class 2021: You can see that it says that it used the concurrent LP and the winner is the primal simplex in this case.

218
00:36:29.280 --> 00:36:42.270
MS Analytics Class 2021: Okay, so the processor that was using the primal simplex found the answer first and then it just stops doesn't bother finishing up the other algorithms it just takes that solution and reports it as the optimal solution.

219
00:36:44.220 --> 00:36:52.050
MS Analytics Class 2021: Okay, so we learned a little bit more about declaration statements we saw we're declaring constraints here.

220
00:36:53.610 --> 00:37:00.390
MS Analytics Class 2021: We talked about solver options right, so if we want to give solver options we say in this case solve with LP.

221
00:37:00.870 --> 00:37:12.870
MS Analytics Class 2021: Later on we'll say solve with Mr LP or solve with nlp and there are other different solver options that we might want to choose in those cases I basically only given you one example of.

222
00:37:14.160 --> 00:37:24.870
MS Analytics Class 2021: A solver and again we don't talk a lot about solver options for linear programming problems because they're easy to solve we don't usually need to use a lot of solver options.

223
00:37:26.190 --> 00:37:28.650
MS Analytics Class 2021: Okay, so let me go back and i'll show you some pictures.

224
00:37:30.330 --> 00:37:31.230
MS Analytics Class 2021: let's see.

225
00:37:32.730 --> 00:37:33.690
get this.

226
00:37:39.810 --> 00:37:45.300
MS Analytics Class 2021: right but i'm going to test you a little bit first let's see whoops oh sorry.

227
00:37:47.250 --> 00:37:53.190
MS Analytics Class 2021: i'm looking at a hidden slide of my notes, but i'm gonna go straight to the videotape here.

228
00:37:54.180 --> 00:38:11.040
MS Analytics Class 2021: This is the action behind the prime most complex algorithm right what i'm calling a trajectory is the path from the initial solution that it finds to successfully better solutions until it finds the optimal solution, you can there, there are three iterations and there's.

229
00:38:12.450 --> 00:38:21.840
MS Analytics Class 2021: Some debate as to what cancers integration finding the initial solution is an iteration finding a better solution is the second and finding the optimal solution as a third.

230
00:38:22.560 --> 00:38:30.510
MS Analytics Class 2021: there's some work in verifying that the solution is in fact optimal, but in this case, we see three iterations.

231
00:38:31.110 --> 00:38:38.790
MS Analytics Class 2021: notice that it's moving along the outside of the feasible region from extreme point solution to extreme point solution.

232
00:38:39.480 --> 00:38:49.830
MS Analytics Class 2021: And they have successively better objective values okay that's the way that the primal simplex algorithm works it finds an initial extreme point solution.

233
00:38:50.340 --> 00:39:01.650
MS Analytics Class 2021: And then moves along the kind of outside of the edges of that feasible region keeps improving until it reaches a point that it can improve and that's the optimal solution.

234
00:39:02.550 --> 00:39:18.540
MS Analytics Class 2021: Okay, so pretty common sensical let's look at the next example now remember the primal simplex algorithm is not the default default is the dual simplex algorithm it's just that it's a little more tricky to understand what's going on in that algorithm.

235
00:39:19.590 --> 00:39:28.110
MS Analytics Class 2021: Now it kind of does something similar in that it moves along well in the primal simplex algorithm digs extreme point solutions.

236
00:39:29.100 --> 00:39:44.640
MS Analytics Class 2021: If you are trying to describe them to someone you might say, what are the corners, if you are trying to be a little bit more precise and mathematical you might say, they are points where the constraints, the constraint lines intersect and the point is feasible.

237
00:39:45.750 --> 00:39:59.310
MS Analytics Class 2021: The dual simplex algorithm moves between points that are intersections of the constraints that are not feasible, so it kind of attacks the problem from the outside, and instead of.

238
00:40:00.390 --> 00:40:06.270
MS Analytics Class 2021: Keeping feasible and making the objective value bigger and in the case of the maximization problem.

239
00:40:06.930 --> 00:40:16.350
MS Analytics Class 2021: It goes through a sequence of super optimal points points that are better than the best feasible point well trying to reduce the visibility.

240
00:40:16.920 --> 00:40:28.920
MS Analytics Class 2021: By that I mean going through a sequence of points that are becoming closer to being feasible right so it's kind of takes advantage of that property but attacks from the outside.

241
00:40:29.790 --> 00:40:38.340
MS Analytics Class 2021: So it finds an initial solution moves to a slightly more feasible solution, and then in the third iteration it finds a feasible solution.

242
00:40:39.990 --> 00:40:50.250
MS Analytics Class 2021: Since all of its points are super optimal once it finds a feasible one it's found the optimal solution Okay, the one with the best objective value now.

243
00:40:51.450 --> 00:40:54.150
MS Analytics Class 2021: If, for some reason you kind of stopped in the middle.

244
00:40:54.660 --> 00:41:11.730
MS Analytics Class 2021: Of the primal simplex algorithm you'd have a feasible solution that might not be the best solution if you stop the dual simplex in the middle you'd have a solution that wasn't necessarily feasible likely wasn't feasible and has an objective value better than the best feasible solution.

245
00:41:12.810 --> 00:41:24.960
MS Analytics Class 2021: So that might say advantage to the primal simplex algorithm but on the other hand, we don't stop in the middle, we just push the button becomes the optimal solution and so it's a question of which is faster and more efficient.

246
00:41:25.290 --> 00:41:25.590
And that's.

247
00:41:27.330 --> 00:41:27.630
MS Analytics Class 2021: Yes.

248
00:41:27.930 --> 00:41:29.850
Kilani, Shadi: sorry to interrupt, can I ask a quick question.

249
00:41:30.060 --> 00:41:30.720
MS Analytics Class 2021: yeah sure.

250
00:41:30.990 --> 00:41:38.550
Kilani, Shadi: How does it, how does it find the starting point in the dual simplex trajectory is it just started an arbitrary point, or is there, like a.

251
00:41:38.640 --> 00:41:56.040
MS Analytics Class 2021: That is a good question and i'm going to give you an answer that it's gonna sound invasive it's also linear programming problem to find the initial solution but it's a special linear programming problem it just tries to find a feasible solution right so it's actually.

252
00:41:57.060 --> 00:42:06.420
MS Analytics Class 2021: It works in two phases, the first phase in the primal simplex finds a feasible solution, and the second phase improves it to find an optimal solution.

253
00:42:07.530 --> 00:42:21.060
MS Analytics Class 2021: it's a good question it doesn't just mean it has heuristics to try and kind of guess a good solution, so the trick if you if you realize that you're looking for an extreme point solution.

254
00:42:21.900 --> 00:42:30.990
MS Analytics Class 2021: The way to describe an extreme point solution is to say, which inequalities are satisfied with the quality at that point.

255
00:42:31.890 --> 00:42:42.390
MS Analytics Class 2021: or another another way mathematically we say those those inequalities are tight so for the origin, the non negativity constraints are the ones that determine that point they're the ones that are tight.

256
00:42:43.440 --> 00:42:54.360
MS Analytics Class 2021: So some of the heuristics train guess a set of tight constraints and then that helps them find the initial feasible solution or in the case that you are really good guesser.

257
00:42:54.690 --> 00:43:07.770
MS Analytics Class 2021: finds you a an initial feasible solution, and hopefully one with a good objective value, because if we found a good starting point, like maybe the optimal solution it'd be a lot easier to improve upon that much faster.

258
00:43:08.790 --> 00:43:09.600
MS Analytics Class 2021: Good question.

259
00:43:11.940 --> 00:43:12.780
MS Analytics Class 2021: Alright, so.

260
00:43:13.560 --> 00:43:14.850
MS Analytics Class 2021: Let me describe you the last.

261
00:43:14.880 --> 00:43:15.690
trajectory.

262
00:43:16.740 --> 00:43:23.670
MS Analytics Class 2021: Again, I said the interior point algorithm is based on algorithms for solving non linear programming models so it's kind of wacky.

263
00:43:24.360 --> 00:43:34.590
MS Analytics Class 2021: It generally starts with points that are outside the feasible region is initially attracted to the interior or inside parts of the feasible region.

264
00:43:35.100 --> 00:43:47.430
MS Analytics Class 2021: And then it kind of slowly tries to incorporate the objective in a controlled fashion, and so it goes this kind of jiggy Jaguar path where it might go in and out of the feasible region.

265
00:43:48.120 --> 00:43:56.670
MS Analytics Class 2021: and ends up close to the optimal solution, and then it might have to get pushed into the corner by this crossover right.

266
00:43:58.440 --> 00:44:02.340
MS Analytics Class 2021: So you don't have to know a lot of detail about us it's kind of helpful to think about.

267
00:44:03.390 --> 00:44:09.330
MS Analytics Class 2021: How they're going about solving the problem, and this kind of just aids your intuition for.

268
00:44:10.530 --> 00:44:22.860
MS Analytics Class 2021: For example, when we start to look at the SAS log and it spits out information about the solution process, you really need to understand how the algorithms work in order to make any sense of that iteration long.

269
00:44:25.170 --> 00:44:26.010
MS Analytics Class 2021: Right alright.

270
00:44:27.330 --> 00:44:28.080
MS Analytics Class 2021: So.

271
00:44:30.750 --> 00:44:33.300
MS Analytics Class 2021: Now i'm going to give you this old test here.

272
00:44:34.650 --> 00:44:39.780
MS Analytics Class 2021: suppose I want to sell the linear programming model, using the dual simplex algorithm.

273
00:44:41.730 --> 00:44:43.290
MS Analytics Class 2021: All been one of these.

274
00:44:44.430 --> 00:44:50.430
MS Analytics Class 2021: Solid statements will accomplish that which is the odd one out, which is the one that will cause a syntax error.

275
00:45:00.210 --> 00:45:04.950
Coleman, Clay: isn't it D because they'll simplex is already the like people.

276
00:45:06.030 --> 00:45:07.020
MS Analytics Class 2021: it's not D.

277
00:45:08.580 --> 00:45:16.800
MS Analytics Class 2021: You can you can call you can specify any algorithm even the default and one reason we might actually want to do that is.

278
00:45:18.060 --> 00:45:27.900
MS Analytics Class 2021: Whoever is reading our code may not realize that the dual simplex is the default algorithm so it might be good to be explicit explicit and list that using the algorithm equal wouldn't change anything.

279
00:45:29.100 --> 00:45:34.170
MS Analytics Class 2021: But no D is not the answer anyone want to take a stab at that and other.

280
00:45:36.150 --> 00:45:37.080
Gupta, Satyam: Be as in.

281
00:45:38.970 --> 00:45:42.300
MS Analytics Class 2021: As in as in bear yes, in fact, it is be.

282
00:45:42.870 --> 00:45:44.970
MS Analytics Class 2021: And the reason that is be is because.

283
00:45:45.420 --> 00:45:52.920
MS Analytics Class 2021: In order to specify solver options such as algorithm equals DS, we need to say solve with LP.

284
00:45:53.880 --> 00:46:01.680
MS Analytics Class 2021: Okay, so this even though it seems kind of crazy because I mean the compiler must know it's a linear programming model.

285
00:46:02.160 --> 00:46:20.040
MS Analytics Class 2021: because it shows the right solver To begin with, but no, you have to be explicit and say solve with LP it is actually possible that you could take this linear programming problem and say solve with nlp you could solve it as the world's easiest nonlinear programming model.

286
00:46:21.540 --> 00:46:24.300
MS Analytics Class 2021: So, in order to get solved REPS and you have to specify the solver.

287
00:46:25.440 --> 00:46:35.040
MS Analytics Class 2021: And if you had a model that wasn't the linear programming model and you said solve with LP it would tell you bad problem type Okay, instead of say optimal.

288
00:46:37.230 --> 00:46:49.710
MS Analytics Class 2021: Alright, so that's kind of it like I said numerical problem, and what I want to do next, is to try and take a business problem i'll be at a toy business problem.

289
00:46:50.340 --> 00:47:00.300
MS Analytics Class 2021: and go through the process of formulating it right thinking that this is kind of what we would do in general, when faced with a business problem.

290
00:47:01.020 --> 00:47:13.740
MS Analytics Class 2021: We would try and come up with a mathematical optimization model, and since linear programming problems are the easiest to solve, and the most efficient to solve if we can get away with a linear programming model that's what we'd like to do.

291
00:47:14.850 --> 00:47:21.330
MS Analytics Class 2021: Of course, the problem might be inherently nonlinear but we'll see in this case, that we can get away with a linear programming model.

292
00:47:23.700 --> 00:47:25.890
MS Analytics Class 2021: So in this little section here.

293
00:47:27.210 --> 00:47:37.830
MS Analytics Class 2021: i'm going to go if I want to come up with a mathematical optimization model, I have to identify what those elements are the decision variables, the constraints and the objective function from.

294
00:47:38.400 --> 00:47:48.630
MS Analytics Class 2021: You know kind of the story problem description of it and the associated data or maybe just from your your incredibly detailed knowledge of the process and the associated data.

295
00:47:50.370 --> 00:48:03.810
MS Analytics Class 2021: So we're going to start with a way of formulating the model that's fairly straightforward and easy to understand, using explicitly named model elements.

296
00:48:04.770 --> 00:48:13.620
MS Analytics Class 2021: Then, in the latter half of tonight we're going to look at an approach that uses index sets in a race Okay, but i'm going to take the simpler approach first.

297
00:48:15.390 --> 00:48:20.340
MS Analytics Class 2021: Because it's going to help kind of gradually build our intuition for the different.

298
00:48:21.660 --> 00:48:26.310
MS Analytics Class 2021: Declaration statements and elements and so forth, and then we'll try and add some.

299
00:48:28.380 --> 00:48:38.760
MS Analytics Class 2021: notion of kind of structure to it because, in order to solve larger problems and read data from data sets We really have to use a raise and index sense.

300
00:48:39.810 --> 00:48:43.560
MS Analytics Class 2021: And i'm also going to introduce you to my friend, the expansion statement.

301
00:48:45.090 --> 00:48:58.260
MS Analytics Class 2021: Alright, so i'll show you two slides I showed you in the last lecture so remember that the decision variables are kind of the most primal or elemental part of the mathematical optimization model.

302
00:48:58.950 --> 00:49:16.020
MS Analytics Class 2021: Right, so they they completely specify what to do so, if you think of having all these minions running around if you have the values and the decision variables, you can send that information to the meetings and they'll know exactly what to do to implement the solution okay.

303
00:49:17.280 --> 00:49:29.190
MS Analytics Class 2021: Whereas some of the model elements, the constraints and the objective are based on measures or scores that are calculated from the decision variables.

304
00:49:29.730 --> 00:49:38.190
MS Analytics Class 2021: Right, so the the right path to formulating a model is start with the decision variables right.

305
00:49:38.640 --> 00:49:53.640
MS Analytics Class 2021: and say if these are the decision variables, this is completely specify how to implement the solution, if not, then I kind of have to take a step back and say okay it doesn't tell me how to do this, so I have to get that information in terms of the decision variables.

306
00:49:55.860 --> 00:50:01.980
MS Analytics Class 2021: So, but once we have a decision variables, then we can kind of formulate the constraints in the objective.

307
00:50:03.960 --> 00:50:10.620
MS Analytics Class 2021: Alright, so i'm going to describe to you a toy business problem which we're going to formulate as a linear programming model.

308
00:50:11.880 --> 00:50:22.860
MS Analytics Class 2021: So this is a takes place in a furniture making company, and so, those of you who are in that industry are saying yes score everybody else to say no, my industry first.

309
00:50:24.360 --> 00:50:33.480
MS Analytics Class 2021: But again, this is a toy problem rather simplified, we only have four different products desks chairs bookcases in bed friends.

310
00:50:34.770 --> 00:50:45.390
MS Analytics Class 2021: Each of them require, and you can tell this is fudge because the numbers are some nice different amount of Labor and to materials metal and wood right.

311
00:50:46.920 --> 00:50:59.070
MS Analytics Class 2021: If we can make a desk we can sell it for this amount, if you make a bed frame, we can sell it for slightly more and we'll assume that everything that we are able to make we consult okay.

312
00:51:00.660 --> 00:51:04.860
MS Analytics Class 2021: So this really doesn't describe a business problem on its own, because.

313
00:51:06.360 --> 00:51:16.620
MS Analytics Class 2021: One element is there are no scarce resources we don't have to figure out how to make good use of our resources because.

314
00:51:17.640 --> 00:51:27.390
MS Analytics Class 2021: there's no information there so there's more to the problem than that and here's the rest of the story there's only a certain amount of Labor metal and wood available.

315
00:51:28.440 --> 00:51:28.800
Okay.

316
00:51:30.060 --> 00:51:36.360
MS Analytics Class 2021: And we'll assume that this isn't availability per day so we're just thinking about the production on a on a given day.

317
00:51:36.930 --> 00:51:50.790
MS Analytics Class 2021: And those resources have an associated costs right, so we have up to 225 hours of Labor available any Labor that we choose to use manufacturer bookcases bed friends desks and chairs.

318
00:51:51.360 --> 00:52:01.170
MS Analytics Class 2021: will cost us $14 an hour, you can think of, maybe those workers could be doing something else useful in the in the factory if they're not making these products.

319
00:52:02.010 --> 00:52:19.770
MS Analytics Class 2021: Okay, so, as I said, well we'll make a simplifying assumption that all the furniture that we make can be sold generate revenue according to that selling prices, so how many desks chairs bookcases in bed friends should we make per day, so that our profit is as large as possible.

320
00:52:21.690 --> 00:52:29.940
MS Analytics Class 2021: So that's the story problem and the associated data, and we want to tease out from that a model.

321
00:52:31.050 --> 00:52:38.610
MS Analytics Class 2021: So first step, as I said, is ask yourself what should the decision you already will see.

322
00:52:40.320 --> 00:52:42.210
MS Analytics Class 2021: Anyone want to make a suggestion.

323
00:52:46.260 --> 00:52:48.210
Amanda Pham: We were should be greater than zero.

324
00:52:49.980 --> 00:52:51.090
MS Analytics Class 2021: should be greater than zero.

325
00:52:51.570 --> 00:52:53.700
Amanda Pham: And Labor met on the word.

326
00:52:55.110 --> 00:53:00.540
MS Analytics Class 2021: Okay, so if I tell the minions if I say everything should be greater than zero.

327
00:53:01.650 --> 00:53:03.540
MS Analytics Class 2021: or will they know exactly what to do.

328
00:53:05.820 --> 00:53:07.980
Amanda Pham: i'll start to figure this out.

329
00:53:08.310 --> 00:53:10.710
MS Analytics Class 2021: I would, I would argue that that.

330
00:53:12.180 --> 00:53:21.030
MS Analytics Class 2021: Those amounts could be calculated from the decision variables, but they're more higher level than the decision variables.

331
00:53:21.870 --> 00:53:32.850
Swanson J, Charles: Decision variable Mr Charles is what you're trying to decide and I guess we're trying to figure out how many desks chairs and bookcases and bed frames, to make is that.

332
00:53:33.600 --> 00:53:34.950
MS Analytics Class 2021: Yes, that's exactly right.

333
00:53:35.130 --> 00:53:37.080
MS Analytics Class 2021: And it's kind of a.

334
00:53:37.500 --> 00:53:47.130
MS Analytics Class 2021: stated in a leading way in the story problem alright so once we know how many desks chairs bookcases in bed friends we're going to make.

335
00:53:47.670 --> 00:54:06.600
MS Analytics Class 2021: We can calculate how much Labor metal and wood is required for this table right so knowing whether the amount of each resources used is non negative and is less than or equal to the amount that we have on hand is something we can calculate.

336
00:54:06.630 --> 00:54:07.950
Jim Clark: Compared to limits.

337
00:54:07.980 --> 00:54:19.770
MS Analytics Class 2021: So that would be entering into constraints, the decision variables just tell the minions how to implement the solution Okay, and in fact we can use.

338
00:54:20.190 --> 00:54:21.630
Jim Clark: The names desk.

339
00:54:21.630 --> 00:54:24.900
MS Analytics Class 2021: chairs bookcases in bed frames, as the names of our decision.

340
00:54:24.900 --> 00:54:28.380
MS Analytics Class 2021: variables we don't have to call them X, Y Z and something.

341
00:54:28.380 --> 00:54:30.330
MS Analytics Class 2021: else and then remember.

342
00:54:30.630 --> 00:54:32.610
MS Analytics Class 2021: which corresponds to which product.

343
00:54:33.120 --> 00:54:45.450
MS Analytics Class 2021: So in prakash model, the rule is that the names of the decision variable successfully valid SAS things and you're saying well that's really helpful I don't know what it's asking is so.

344
00:54:46.260 --> 00:55:00.630
MS Analytics Class 2021: here's some fun facts and maybe some not true facts and some alternate facts about SAS names, so if you're a SAS programmer you're familiar with what constitutes a valid SAS name.

345
00:55:02.100 --> 00:55:06.990
MS Analytics Class 2021: But since you're you don't don't necessarily have a background in SAS which is not a prerequisite.

346
00:55:09.540 --> 00:55:19.170
MS Analytics Class 2021: SAS names can be pretty long, so you have a lot of characters to work with they can't start with a number, but so far chairs is is okay.

347
00:55:20.640 --> 00:55:28.830
MS Analytics Class 2021: You can't have spaces in a SAS name but you could have underscores if you wanted to have like different elements of a word.

348
00:55:29.880 --> 00:55:34.170
MS Analytics Class 2021: And another thing, which is important about SAS means is they're not case sensitive.

349
00:55:34.950 --> 00:55:51.870
MS Analytics Class 2021: So if you have a decision variable that's called chairs and lowercase it's the same as chairs and uppercase okay it's the same decision variable and we will take advantage of that flexibility with some naming conventions which i'll flush out a little bit more later.

350
00:55:52.920 --> 00:56:09.060
MS Analytics Class 2021: But one of the things that is going to be true of our naming conventions is that we will capitalize the names of our decision variables Okay, so instead of lowercase shares our decision variable i'm going to try and refer to as uppercase see pairs okay cheers.

351
00:56:11.820 --> 00:56:23.100
MS Analytics Class 2021: So once I know what the decision variables are and their names I could I could i'm visualizing this now there something something name inequality bound stuff like that.

352
00:56:24.030 --> 00:56:32.940
MS Analytics Class 2021: that's kind of how i'm thinking my program is starting, but then I have to be able to declare the objective function and the constraints as well.

353
00:56:33.660 --> 00:56:42.870
MS Analytics Class 2021: So let me think about how I would declare the objective now our objective in this case is to make profit as large as possible.

354
00:56:43.770 --> 00:56:59.670
MS Analytics Class 2021: So really what that is is we're trying to maximize the net profit here, so the net profit is going to be the difference between revenue and costs right i'm going to get all this information from I kind of glommed the tables altogether.

355
00:57:01.230 --> 00:57:14.370
MS Analytics Class 2021: The table that you see here is actually a table per unit okay so it's the amount of Labor per desk not a mental per desk the selling price per desk.

356
00:57:15.120 --> 00:57:28.950
MS Analytics Class 2021: If I want to make a certain number of desks, I would take the number of desks I make and multiply by those quantum needs to get the amount of Labor metal wood and so forth, so I can kind of think about multiplying through that row times desks.

357
00:57:29.550 --> 00:57:46.380
MS Analytics Class 2021: To get the actual contribution from desks, and as I, as I said before, i'm going to capitalize the name so it's now capital D desks let's do the same thing for chairs and because we have wide slides let's do the same thing for bookcases and bed frames.

358
00:57:48.540 --> 00:57:58.200
MS Analytics Class 2021: So now having multiplied through by those me again, you can think of this kind of what we're doing in matrix terms also how would I calculate the revenue.

359
00:57:59.940 --> 00:58:04.920
MS Analytics Class 2021: from making some unknown number of desks chairs bookcases in bed frames.

360
00:58:06.000 --> 00:58:29.040
MS Analytics Class 2021: Well, if I just read down that selling price column 94 times desk is the contribution to revenue from desks, to the total revenue is 94 times desks for 79 times chairs was 125 times bookcases plus one or nine times bed friends that's an expression that calculates the revenue right.

361
00:58:30.450 --> 00:58:35.520
MS Analytics Class 2021: We would refer to that as a variable expression, because it involves the decision variables and because.

362
00:58:36.870 --> 00:58:42.480
MS Analytics Class 2021: It doesn't have a value until you know the value of the decision variables plug those in and you find out what the revenue is.

363
00:58:43.350 --> 00:58:52.140
MS Analytics Class 2021: Well, likewise these other columns if I add two times desks plus chairs plus three times bookcases plus two times bed frames.

364
00:58:52.740 --> 00:59:04.560
MS Analytics Class 2021: That will give me the total number of hours of Labor required for that production plan right and if I want to know the cost of that I would multiply that expression times 14.

365
00:59:05.250 --> 00:59:15.900
MS Analytics Class 2021: that's the per unit cost of Labor right So if I want to find the net profit, I take the revenue calculated from the from the right most column.

366
00:59:16.350 --> 00:59:32.640
MS Analytics Class 2021: And subtract off 14 times the sum of the first column minus 20 times of some of the second minus 11 times the third and again i'm subtracting because it's a cost, in order to get the net profit i'd take the revenue and subtract off the costs.

367
00:59:34.470 --> 00:59:41.010
MS Analytics Class 2021: So that's really going to be a mouthful or a handful to type but that's the expression for the objective.

368
00:59:43.050 --> 00:59:52.770
MS Analytics Class 2021: While we're here, what about the constraints well if I some down this column two times desk plus chairs plus three times bookcases plus two times bed frames.

369
00:59:53.550 --> 01:00:01.890
MS Analytics Class 2021: And that gives me the total number of hours of Labor within the constraint would say that that variable expression is that most to 25.

370
01:00:03.090 --> 01:00:08.010
MS Analytics Class 2021: So the same approach of kind of converting the table of per unit table to.

371
01:00:09.060 --> 01:00:17.310
MS Analytics Class 2021: A variable number of each product gives us all the terms that we need to formulate the objective and the constraints.

372
01:00:19.380 --> 01:00:23.790
MS Analytics Class 2021: Okay, so let me, let me show you what that would look like in improv model.

373
01:00:25.140 --> 01:00:39.480
MS Analytics Class 2021: Well, let me show you one slide first first, which is let's say you've taken a an operations research management science systems engineering, one of the different flavors of mathematical optimization courses.

374
01:00:40.590 --> 01:00:42.540
MS Analytics Class 2021: And you did a formulation exercise.

375
01:00:44.070 --> 01:00:56.880
MS Analytics Class 2021: This is what you would hand in kind of parodying the the general format you'd say Mr Max you write down an expression for the objective, subject to, and then you give all the constraints in the variable bounced and so forth.

376
01:00:57.930 --> 01:01:04.650
MS Analytics Class 2021: And if you're a conscientious student you kind of explain the symbols that you use at the bottom of your of your your submission.

377
01:01:05.460 --> 01:01:20.670
MS Analytics Class 2021: And the reason that this works you're taking a classes, because the Professor has an expectation of what the correct answer is, and can, for example, look at your submission and say, well, they got it most they'll give them some partial credit right.

378
01:01:22.620 --> 01:01:32.700
MS Analytics Class 2021: let's Contrast that with the compiler the compiler does not assign partial credit it either runs without syntax errors or it has syntax errors right.

379
01:01:33.480 --> 01:01:48.150
MS Analytics Class 2021: And the way that approx models program is structured is is more compiler centric in that and it's almost kind of a reversal of the structure of what you'd hand in normally for a class assignment.

380
01:01:49.110 --> 01:01:58.410
MS Analytics Class 2021: It starts with that kind of explanation of what everything is set some parameters, then declares the variables than the constraints than the objective.

381
01:01:59.100 --> 01:02:07.590
MS Analytics Class 2021: Okay, so it's almost an upside down version of the slide that I showed you previously and then oftentimes if we want to know what the optimal solution is you might say, print.

382
01:02:08.760 --> 01:02:14.160
MS Analytics Class 2021: In this case we would say print desks chairs bookcases in bed frames, instead of print X, Y.

383
01:02:16.170 --> 01:02:25.680
MS Analytics Class 2021: Alright, so kind of plug in the blocks that we have in our problem we don't have any set some parameters will see those a little bit later after the break.

384
01:02:26.460 --> 01:02:36.900
MS Analytics Class 2021: But we do have decision variables again desks chairs bookcases in bed frames, the constraints concerned the limited availability of our resources.

385
01:02:37.440 --> 01:02:48.810
MS Analytics Class 2021: And the objective we already gone through net profit is going to be the difference between revenue and costs, and we have variable expressions that we can plug in for both of those for revenue and for costs.

386
01:02:50.940 --> 01:02:52.920
MS Analytics Class 2021: So let me go in and see what that looks like.

387
01:02:55.410 --> 01:02:58.020
MS Analytics Class 2021: So i'm going to go ahead and go back into the studio.

388
01:02:59.040 --> 01:03:00.360
MS Analytics Class 2021: And I am.

389
01:03:01.440 --> 01:03:13.830
MS Analytics Class 2021: going to open up, we have to page down here a little bit it's furniture, but it's called furniture names and the reason is because we're using explicit names for everything i'll say a little bit more of that.

390
01:03:15.420 --> 01:03:28.080
MS Analytics Class 2021: So here's our decision variables desks chairs bookcases in bed friends and the associated bounce we've been they need to be non negative, I mean.

391
01:03:28.620 --> 01:03:44.370
MS Analytics Class 2021: If if if our solution told us to make minus one does would that mean that we could take apart, a desk that we already made and use the resources for chairs and now that makes sense in order for the solution to be implementable by your minions, we have to have non negativity here.

392
01:03:46.320 --> 01:03:52.140
MS Analytics Class 2021: But otherwise nothing new just just names that are a little bit more descriptive of what they represent in the problem.

393
01:03:53.190 --> 01:04:03.750
MS Analytics Class 2021: Here you'll notice that my constraints that i'm declaring well, similar to what I had before, involving a body and a relation and a limit.

394
01:04:05.400 --> 01:04:06.690
MS Analytics Class 2021: also have a name.

395
01:04:08.580 --> 01:04:19.950
MS Analytics Class 2021: So pocket model lets you right after the con given name for the constraint and then a colon and then describe the constraints of the compiler now, why is that useful.

396
01:04:20.460 --> 01:04:28.860
MS Analytics Class 2021: Well, various times will want to refer to a specific constraint, and we do so by name, we might want to ask.

397
01:04:29.400 --> 01:04:45.690
MS Analytics Class 2021: For some attributes like let me see what the limit of this constraint is or in the solution is this constraint, does it have kind of slack or is it tight to there's various things that we might want to ask about constraints, and so we need them.

398
01:04:46.740 --> 01:04:53.640
MS Analytics Class 2021: So i've called these Labor metal and wood after the resources that that that whose availability, they described.

399
01:04:56.100 --> 01:05:01.530
MS Analytics Class 2021: My objective again net profit and notice that because net profit has two words.

400
01:05:02.640 --> 01:05:12.960
MS Analytics Class 2021: i'm using what it's called camel case right which is just capitalizing the first letter of each word that's part of our naming conventions that again i'll say a little bit more about later.

401
01:05:14.610 --> 01:05:16.680
MS Analytics Class 2021: So the first term is the revenue.

402
01:05:18.090 --> 01:05:28.890
MS Analytics Class 2021: minus the cost of Labor minus the cost of metal minus the cost of wood, so you can go back to the table and see that I actually use the same expressions that I referred to there.

403
01:05:31.680 --> 01:05:38.640
MS Analytics Class 2021: Well, if you have a complicated model like this, as the model starts to get bigger you're more likely to make not only.

404
01:05:41.700 --> 01:05:51.300
MS Analytics Class 2021: typing errors that may be some logical errors, so one thing that's useful is to look at a list of your model and that's what the expand statement here is doing it's just going to.

405
01:05:51.630 --> 01:06:03.840
MS Analytics Class 2021: list out the whole model that we can look at and we'll see that we can also look at expanding just parts of it, but for now it's a small model will expand the whole shebang solve it and print, the solution.

406
01:06:05.580 --> 01:06:08.850
MS Analytics Class 2021: So let's let's are dying to know how much to make so let's.

407
01:06:09.990 --> 01:06:10.410
MS Analytics Class 2021: Just.

408
01:06:11.130 --> 01:06:26.070
Wilson Pineda: Fine we'll see here um I probably you say I missed it but is there a way to declare that the desks chairs bookcases and my friend has to be easier, so will we won't come up with a solution like 2.4 chairs and you know.

409
01:06:28.110 --> 01:06:36.150
MS Analytics Class 2021: I know what you're asking, and there is a way to do that, but that would take us out of the class of linear programming models so we're going to put that off for the future.

410
01:06:37.350 --> 01:06:44.850
MS Analytics Class 2021: look at it, if you look at the handouts you'll see that there is a an option for the variable declaration statement that could accomplish that.

411
01:06:46.380 --> 01:06:46.860
Wilson Pineda: Thank you.

412
01:06:47.280 --> 01:06:48.870
MS Analytics Class 2021: So let's go ahead and submit that.

413
01:06:49.530 --> 01:06:57.960
MS Analytics Class 2021: And it may be the case that we just get lucky in this case and, in fact, the best solution already has integer values for the decision variables.

414
01:06:58.740 --> 01:07:14.580
MS Analytics Class 2021: Well let's see look at the expand statement gay male list of the model, the decision variables and their bounds, the objective wait a minute that's not my objective my objective was much more complicated than what happened to all my typing.

415
01:07:15.900 --> 01:07:18.930
MS Analytics Class 2021: 13 times desks, what would that represent.

416
01:07:21.000 --> 01:07:22.770
MS Analytics Class 2021: If you go back and look at the code.

417
01:07:23.850 --> 01:07:25.290
MS Analytics Class 2021: see our objective here.

418
01:07:27.120 --> 01:07:33.090
MS Analytics Class 2021: has a lot of things that multiplied desks, so what is the compiler done in showing us the.

419
01:07:34.920 --> 01:07:50.430
MS Analytics Class 2021: The objective here it's simplified expression right so 13 times desks would represent the net profit per desk, which is the revenue minus the costs so it's simplified the expression right.

420
01:07:51.810 --> 01:08:08.160
MS Analytics Class 2021: And here are constraints, with their names their bodies and their limits right so looking at the expansion of a model can give you an opportunity to notice, something that might be a right all right.

421
01:08:10.110 --> 01:08:13.110
MS Analytics Class 2021: let's look at the problem summary.

422
01:08:15.810 --> 01:08:26.790
MS Analytics Class 2021: linear objective for decision variables bounding below that sounds like my model all right three constraints they're all less than or equal to constraints doesn't my resource availabilities.

423
01:08:27.810 --> 01:08:30.480
MS Analytics Class 2021: Okay, so let's look and see.

424
01:08:31.710 --> 01:08:41.160
MS Analytics Class 2021: Not surprisingly, it use the dual simplex because that's the default found an optimal solution objective value here just shy of 2000.

425
01:08:42.450 --> 01:08:45.000
MS Analytics Class 2021: notice that there is a slight primal and feasibility.

426
01:08:46.020 --> 01:08:51.090
MS Analytics Class 2021: Then by slide I mean that's very slight right, this is 10 to the minus 14.

427
01:08:52.230 --> 01:08:58.050
MS Analytics Class 2021: So what prakash model does is solves the problem using floating point arithmetic.

428
01:08:59.190 --> 01:09:05.580
MS Analytics Class 2021: If you want to find out what what one of those extreme points solutions in the corners are.

429
01:09:07.170 --> 01:09:14.970
MS Analytics Class 2021: You can check and see which are the constraints are tight or satisfied by that point and solve that system of equations.

430
01:09:15.420 --> 01:09:30.390
MS Analytics Class 2021: But because there's going to be small amounts of ran round off air and floating interest and tick you get a point that's almost exactly the point that you want, but it's just a little bit off and that a little bit off can generate a point that is actually outside the feasible region.

431
01:09:31.470 --> 01:09:36.900
MS Analytics Class 2021: by a tiny amount right, you can see that it's only off by 10 to the minus 14.

432
01:09:38.700 --> 01:09:39.690
MS Analytics Class 2021: Not very much.

433
01:09:40.770 --> 01:09:55.560
MS Analytics Class 2021: All right, so number of iterations times zero we're going to see zero times for a while, until we start to look at larger models and in fact we did get lucky, and this solution does have integer values for the decision variables okay so fortunate for us.

434
01:09:56.640 --> 01:10:08.190
MS Analytics Class 2021: Not so fortunate for desks alright, so you might be thinking well i'm This is my furniture making company should not be making desks mean.

435
01:10:08.910 --> 01:10:18.330
MS Analytics Class 2021: Well, the model is doing exactly what you're asking it to do if there's nothing in the constraints that make desks necessary.

436
01:10:18.690 --> 01:10:26.460
MS Analytics Class 2021: Then it's going to find the best solution if you need to make desks, you could include some information like desk is at least five something like that.

437
01:10:27.180 --> 01:10:37.800
MS Analytics Class 2021: Right, you want a model to show you a novel solution to your business problem that you might not have thought of before but is, in this case profitable.

438
01:10:39.540 --> 01:10:45.210
MS Analytics Class 2021: So that they shouldn't be shouldn't shouldn't necessarily be seen as a bad thing, I mean it's.

439
01:10:45.930 --> 01:11:02.310
MS Analytics Class 2021: It may mean that we haven't included everything from the business problem in our model or it may be just that that we shouldn't be making this, at least not this day with these resources availabilities and these selling prices for our units.

440
01:11:03.990 --> 01:11:05.400
MS Analytics Class 2021: Alright, so let me go back to.

441
01:11:06.600 --> 01:11:08.070
MS Analytics Class 2021: Show you something here.

442
01:11:09.990 --> 01:11:25.170
MS Analytics Class 2021: That is kind of fundamental so when you take SAS programming one I was forced to take SAS programming when I think I remember learning two things that incest every line should end with a semi colon blank lines and.

443
01:11:26.310 --> 01:11:38.640
MS Analytics Class 2021: That you should always check the log file right, even if you don't have syntax errors there's usually some nuggets in there, so let's look and see what's in the log file So what do we see here.

444
01:11:40.200 --> 01:11:40.740
MS Analytics Class 2021: kind of.

445
01:11:41.910 --> 01:11:51.150
MS Analytics Class 2021: ignore the weird weirdness here about this has something to do with the data sets and the environment that we're working in here, it has a section that.

446
01:11:52.290 --> 01:11:54.120
MS Analytics Class 2021: kind of is the problem.

447
01:11:55.470 --> 01:11:58.380
MS Analytics Class 2021: summary table how many variables, how many constraints.

448
01:12:00.840 --> 01:12:07.170
MS Analytics Class 2021: It tells you about something called the pre solver which we'll talk a little bit more about later, basically, is just.

449
01:12:07.590 --> 01:12:16.230
MS Analytics Class 2021: tries to simplify the problem before it solves it using some fairly primitive considerations and then it goes to an iteration log.

450
01:12:16.860 --> 01:12:27.900
MS Analytics Class 2021: And you can see in the iteration log it says every so many iterations that tells you about your progress in terms of in this case time in seconds zero not surprisingly, and the objective value.

451
01:12:29.910 --> 01:12:36.720
MS Analytics Class 2021: And here's this phase business, where I was describing how we find an initial solution there are actually two phases.

452
01:12:38.100 --> 01:12:52.710
MS Analytics Class 2021: In this case it was able to go directly to the second phase Now this is reported in iteration one and four and you might say, well, what happened between iteration one and for how come I don't see that there is a solver option.

453
01:12:53.970 --> 01:12:58.770
MS Analytics Class 2021: called log freak so we could say so, with LP.

454
01:13:00.210 --> 01:13:03.420
MS Analytics Class 2021: log freak not that kind of free frequency.

455
01:13:04.800 --> 01:13:13.110
MS Analytics Class 2021: equals let's say two and it's just going to give you more iteration this would be like every other iteration so if we submit this and look at the log.

456
01:13:15.900 --> 01:13:23.340
MS Analytics Class 2021: You can see now that it's an iteration one, two and four always tells you the first the last and then it's every that many steps.

457
01:13:24.810 --> 01:13:25.350
MS Analytics Class 2021: Now.

458
01:13:27.540 --> 01:13:44.490
MS Analytics Class 2021: Why is the objective value going down here that's kind of puzzling, it seems like that's antithetical to our our desire here to maximize, why is the objective value getting worse, why didn't we just stopped in the beginning, we were making 6000.

459
01:13:44.880 --> 01:13:47.700
Swanson J, Charles: Because there is it feasible region.

460
01:13:48.300 --> 01:13:51.540
MS Analytics Class 2021: that's right remember that the algorithm is the dual simplex algorithm.

461
01:13:52.110 --> 01:14:06.930
MS Analytics Class 2021: And it goes through these outside the feasible region super optimal solutions so that, even though this one looks great 6000 that's a lot of money it doesn't satisfy the constraints, and so we couldn't implement it, we couldn't say minions go make fun.

462
01:14:08.130 --> 01:14:08.400
Okay.

463
01:14:09.600 --> 01:14:17.280
MS Analytics Class 2021: Alright, so let's go back to the code tab will do a little bit more, and then i'm going to get ready for a break.

464
01:14:18.570 --> 01:14:19.200
MS Analytics Class 2021: So.

465
01:14:19.590 --> 01:14:26.640
MS Analytics Class 2021: let's imagine that you were typing this hard to imagine, I know, but let's try and imagine it anyway, you might say, well look.

466
01:14:27.630 --> 01:14:38.790
MS Analytics Class 2021: I just typed this here, and then I typed it again I realize it's the same thing, how did I do that well, maybe next time i'll just cut and paste right.

467
01:14:39.300 --> 01:14:47.460
MS Analytics Class 2021: So there is some economy that we could have if we could instead of having to type this or cut and paste it over and over again.

468
01:14:48.240 --> 01:14:57.270
MS Analytics Class 2021: We could take this useful intermediate quantity and somehow define it and then be able to use it later on in the formulation.

469
01:14:57.870 --> 01:15:10.860
MS Analytics Class 2021: And in fact pocket model has that capability, we could use macro variables and SAS the pocket model has its own built in functionality for this that's that's more useful.

470
01:15:12.060 --> 01:15:23.790
MS Analytics Class 2021: they're like decision variables, there are different kind of variable they're called implicit variables, and let me show you how that would look if we, for example, took this.

471
01:15:24.540 --> 01:15:34.470
MS Analytics Class 2021: expression that tells us how many units of metal and defined it as its own thing okay so i'm going to open up furniture in there.

472
01:15:36.600 --> 01:15:48.930
MS Analytics Class 2021: All right, slide before defined that to be lds because metal is the units for metal is pounds, so I say impair name of the impair equals, an expression.

473
01:15:49.410 --> 01:15:56.850
MS Analytics Class 2021: That defines the implicit variable and then I can use that abbreviation, so to speak, in the constraints and the objective.

474
01:15:57.510 --> 01:16:06.150
MS Analytics Class 2021: So what this allows us to do is to define intermediate quantities that will help us build the formulation up.

475
01:16:06.720 --> 01:16:14.760
MS Analytics Class 2021: In more of kind of like a stepwise fashion, so I can talk you through the impairs then it's easier to describe what the objective is.

476
01:16:15.300 --> 01:16:29.820
MS Analytics Class 2021: Because, instead of being this really long expression it's a more logical way of looking at the difference between revenue and cost okay so we'll make extensive use of these implicit variables, and it also just to show off.

477
01:16:31.170 --> 01:16:42.780
MS Analytics Class 2021: This current market constraints, is a comma separated list as probably the last time i'll do that this is true that that can work Okay, now the other nice thing about implicit variables is.

478
01:16:42.870 --> 01:16:44.340
MS Analytics Class 2021: That you can report with them.

479
01:16:45.030 --> 01:16:51.390
MS Analytics Class 2021: So, in fact, if i'm calculating how many hours of Labor pounds of metal and cubic feet of water in the solution.

480
01:16:52.440 --> 01:17:03.000
MS Analytics Class 2021: What am I just print that out because that's information about the solution as well, I mean I could derive it from the decision variables, but i'm already already named it might as well just printed.

481
01:17:04.260 --> 01:17:06.540
MS Analytics Class 2021: So if I if I execute this.

482
01:17:08.280 --> 01:17:14.700
MS Analytics Class 2021: i'm going to get a little bit more information about the solution, you can see the implicit variables in the expand here.

483
01:17:16.200 --> 01:17:17.520
MS Analytics Class 2021: let's look at the.

484
01:17:19.140 --> 01:17:42.240
MS Analytics Class 2021: solution summary and the solution here, you can see that this solution uses all the available Labor melon would, if you go back and compare it to the the coefficients in the model to 25 117 and for 20 be able to expand here to 25 117 for 20 so it's using all of the available resources.

485
01:17:43.260 --> 01:17:47.820
MS Analytics Class 2021: that's not a priori always going to be true just happens to be true in this case.

486
01:17:48.870 --> 01:17:49.380
MS Analytics Class 2021: Okay.

487
01:17:50.640 --> 01:17:51.450
MS Analytics Class 2021: So you thinking.

488
01:17:52.740 --> 01:17:53.820
MS Analytics Class 2021: At what price.

489
01:17:53.880 --> 01:18:14.490
MS Analytics Class 2021: I mean they're so they're great they help us build the model in a more kind of structured simplified way I can report with them, but don't they kind of like increase the size of the model, because if I look at the expand here, I have three new equations and three new variables.

490
01:18:16.410 --> 01:18:21.540
MS Analytics Class 2021: That would be a bigger problem might take longer solve well, it turns out that the way that implicit variables.

491
01:18:21.540 --> 01:18:23.550
MS Analytics Class 2021: are handled in pocket model is.

492
01:18:24.360 --> 01:18:33.090
MS Analytics Class 2021: That these expressions are used to substitute the implicit variables out before the problem goes to the solver So if you were to look at the problem summary.

493
01:18:33.750 --> 01:18:45.420
MS Analytics Class 2021: you'd see for decision variables and three constraints so there's really not a price they are just as great as they seem right so.

494
01:18:45.780 --> 01:18:48.030
MS Analytics Class 2021: They define intermediate quantities.

495
01:18:48.150 --> 01:18:55.770
MS Analytics Class 2021: That can be used for reporting but they're substituted out before the problem is solved so there's no reason not to use them and we could go crazy with them here, but I just.

496
01:18:57.930 --> 01:18:58.830
MS Analytics Class 2021: use a few.

497
01:18:59.910 --> 01:19:05.220
MS Analytics Class 2021: To show you how that would look and so typically when we say declare variables we're declaring.

498
01:19:05.520 --> 01:19:07.080
MS Analytics Class 2021: Both decision variables.

499
01:19:07.380 --> 01:19:15.510
MS Analytics Class 2021: And implicit variables right because they can enter into the constraints and the objective, so we have to declare declare them before we.

500
01:19:16.770 --> 01:19:17.730
MS Analytics Class 2021: refer to them.

501
01:19:19.980 --> 01:19:20.400
MS Analytics Class 2021: Okay.

502
01:19:22.020 --> 01:19:23.130
So let's see.

503
01:19:24.450 --> 01:19:27.690
MS Analytics Class 2021: i've got one or two more slides and then we'll take a break.

504
01:19:30.210 --> 01:19:31.140
MS Analytics Class 2021: All right, so.

505
01:19:33.540 --> 01:19:45.420
MS Analytics Class 2021: In this case, I can I can kind of show you bye bye bye with picture here our decision variables desk chairs the cases in bed, France, the implicit variables, the calculated how much of each resource are used.

506
01:19:46.440 --> 01:19:47.910
MS Analytics Class 2021: In the diagram below.

507
01:19:49.080 --> 01:19:55.830
MS Analytics Class 2021: The arrow kind of indicates that implicit variables are calculated from the decision variables using some of the problem data.

508
01:19:56.790 --> 01:20:05.700
MS Analytics Class 2021: Right and the constraints are calculated from the decision variables in the implicit variables using problem data, the objective function likewise.

509
01:20:06.570 --> 01:20:16.050
MS Analytics Class 2021: But you might notice that the decision variables now don't directly enter into the constraints only implicitly through these implicit variables right.

510
01:20:17.010 --> 01:20:23.010
MS Analytics Class 2021: And you could imagine like well let's say we add a new implicit variable it calculates the revenue.

511
01:20:23.670 --> 01:20:31.770
MS Analytics Class 2021: And that's its value is calculated from the decision variables and the decision variables don't enter into the objective function, or the constraints in our model.

512
01:20:32.670 --> 01:20:42.780
MS Analytics Class 2021: When they're substituted out they do, but in terms of the model that you, you you formulated in the program he could add more implicit variables in this case even more.

513
01:20:44.790 --> 01:20:54.480
MS Analytics Class 2021: Okay, so let me give you a little bit more detail about our friend the expand statement, if you just say expand you get the whole thing if you say.

514
01:20:55.950 --> 01:21:04.830
MS Analytics Class 2021: expand and then the name of something it just expands that part of the model so if you have a big model with lots of decision variables and constraints.

515
01:21:05.370 --> 01:21:15.930
MS Analytics Class 2021: You might want to pick on just a few representative variables their constraints and expand them to see if they look correct right again, this is a way of kind of troubleshooting your your Program.

516
01:21:17.040 --> 01:21:30.330
MS Analytics Class 2021: You can also use options to get sections of the program so you can say expand Labor and get the Labor constraint, or you can say expand slash con and get all the constraints.

517
01:21:30.840 --> 01:21:46.290
MS Analytics Class 2021: So you can get sections of the program or the names by name the individual model elements expanded, so it has some ways to filter the output, so you can just get a little bit of information about a large model to help you troubleshoot it.

518
01:21:47.460 --> 01:22:03.930
MS Analytics Class 2021: Okay, and oftentimes we go back and do these things, when we run them i'll get the optimal solution and realize that it's not working, we try and troubleshoot what's what's going on in the model expand statement can be used to benefit there.

519
01:22:06.150 --> 01:22:13.890
MS Analytics Class 2021: Okay, so i'm going to as a quick demonstration i'm going to add a constraint, to the furniture making model.

520
01:22:15.090 --> 01:22:26.370
MS Analytics Class 2021: So, again, I said that one of the virtues of using optimization as an approach was that you could take a solution and modify it to solve new problems so let's say.

521
01:22:27.090 --> 01:22:32.670
MS Analytics Class 2021: we're doing this furniture making thing, and someone says well i'm afraid you can't afford all those resources.

522
01:22:33.240 --> 01:22:49.020
MS Analytics Class 2021: You only have a limited amount of money that you can use to purchase resources, so if we were to buy them all, it would cost $10,110 let's say we have a budget of 10,000 let's look at adding that to the problem.

523
01:22:50.490 --> 01:22:51.870
MS Analytics Class 2021: So we'll go back to our model.

524
01:22:54.780 --> 01:22:56.790
MS Analytics Class 2021: And we're going to add a new constraint.

525
01:22:58.140 --> 01:23:07.470
MS Analytics Class 2021: So that look like con and you notice that in studio kind of prompt you with the syntax of pocket mode, which is pretty useful.

526
01:23:08.550 --> 01:23:18.030
MS Analytics Class 2021: So i'm going to add in this constraint, and I want to expand it in order to expand it i'm going to give it a name so let's call it budget.

527
01:23:19.530 --> 01:23:20.130
MS Analytics Class 2021: I can spell it.

528
01:23:22.380 --> 01:23:28.320
MS Analytics Class 2021: that's the that's the danger spelling of budget here but budget Okay, and a colon.

529
01:23:29.730 --> 01:23:39.420
MS Analytics Class 2021: Now, where can I steal an expression for the total cost of all my resources well, I know that I subtract that cost off as part of my objective.

530
01:23:40.530 --> 01:23:42.060
MS Analytics Class 2021: So let's copy it here.

531
01:23:44.490 --> 01:23:45.720
MS Analytics Class 2021: and paste it there.

532
01:23:47.370 --> 01:23:50.070
MS Analytics Class 2021: and, probably, we should add, instead of subtract.

533
01:23:51.120 --> 01:23:57.570
MS Analytics Class 2021: So let's take the cost of Labor plus cost of metal plus the cost of one.

534
01:23:59.400 --> 01:24:04.470
MS Analytics Class 2021: And we'll say that's less than or equal to what was the number, I gave you 10,000.

535
01:24:06.270 --> 01:24:15.210
MS Analytics Class 2021: there's my constraint right if I want to check that I might expand it and to expand that just that constraint, I could say expand budget.

536
01:24:16.980 --> 01:24:18.540
MS Analytics Class 2021: Again, spelling is essential here.

537
01:24:19.650 --> 01:24:27.480
MS Analytics Class 2021: If it didn't have a name I could I could say expand slash con and get all the constraints and figure out which one was the budget constraint, but this is.

538
01:24:28.830 --> 01:24:34.500
MS Analytics Class 2021: pretty easy way to go about getting in let's see if that works so i'll submit it.

539
01:24:36.330 --> 01:24:43.140
MS Analytics Class 2021: went to results that means is good, good news that means I didn't have syntax errors in the log right no syntax errors.

540
01:24:44.580 --> 01:24:48.210
MS Analytics Class 2021: So there's my budget constraint, I expanded just that constraint.

541
01:24:49.500 --> 01:24:57.270
MS Analytics Class 2021: And that might change the solution, you can see, in fact, that my objective value went down slightly.

542
01:24:58.320 --> 01:25:00.120
MS Analytics Class 2021: And the new solution here.

543
01:25:01.890 --> 01:25:09.390
MS Analytics Class 2021: is no longer an integral solution right, it has a fractional number of bedrooms and we could finance that we could say it's a rate.

544
01:25:10.260 --> 01:25:19.500
MS Analytics Class 2021: Eventually, we probably want to add in the restrictions in the gravity, but for now, since the linear programming model has it could come up with solutions like this.

545
01:25:20.640 --> 01:25:20.970
MS Analytics Class 2021: Okay.

546
01:25:22.770 --> 01:25:27.870
MS Analytics Class 2021: Alright, so let me leave you with a thought and then we'll take a take a break before we pick up.

547
01:25:29.550 --> 01:25:33.060
MS Analytics Class 2021: Sorry, I need to get back to PowerPoint ago.

548
01:25:35.520 --> 01:25:45.270
MS Analytics Class 2021: So the furniture making problem is from a class of problems called product mix problems and a product product mix problem this ask for what mix of products to make.

549
01:25:46.020 --> 01:25:58.620
MS Analytics Class 2021: And it could have a lot more products more than just for, and it could have a lot of a lot more resource like maybe different types of Labor that go into production different many different types of materials.

550
01:25:59.280 --> 01:26:12.060
MS Analytics Class 2021: But kind of the same basic structure right and the question is, is the way that we formulated the furniture making problem is that is that tenable will it go forward for these larger problems.

551
01:26:13.170 --> 01:26:23.760
MS Analytics Class 2021: Because if we use that approach, regardless of having like thousands of products and hundreds of resources, we have to type all that stuff out right.

552
01:26:24.360 --> 01:26:40.050
MS Analytics Class 2021: that's not going to work going forward so we have to come up with a way of formulating mathematical optimization models that allows us to read data from data sets or tables okay so we'll tackle that after the break so let's break until.

553
01:26:41.280 --> 01:26:49.950
MS Analytics Class 2021: 35 so so i'm saying that thinking that we probably will be getting back here a minute or two after that so.

554
01:26:51.510 --> 01:26:53.520
MS Analytics Class 2021: let's take a little break and then we'll get back to it.

555
01:26:57.300 --> 01:26:58.410
MS Analytics Class 2021: In variables.

556
01:26:59.580 --> 01:26:59.850
MS Analytics Class 2021: and

557
01:27:00.900 --> 01:27:03.330
MS Analytics Class 2021: That kind of describes some of the.

558
01:27:04.410 --> 01:27:10.110
MS Analytics Class 2021: features that make it desirable that it is very explicit you can look at it and kind of intuit what is going on.

559
01:27:11.970 --> 01:27:20.100
MS Analytics Class 2021: But the drawback is that requires us to enter the data, so instead of reading the data we are typing the numbers right.

560
01:27:21.270 --> 01:27:24.210
MS Analytics Class 2021: By way of contrast, the approach on your show you next.

561
01:27:25.290 --> 01:27:26.850
MS Analytics Class 2021: allows us to read the data.

562
01:27:28.200 --> 01:27:34.050
MS Analytics Class 2021: Once you get used to the syntax you'll find that it's very flexible and easy to work with.

563
01:27:35.070 --> 01:27:39.360
MS Analytics Class 2021: But while you're learning the syntax you will not like it.

564
01:27:40.530 --> 01:27:53.400
MS Analytics Class 2021: You will find that the fact that i've described that it's compact here is you'll think of it as it's too terse okay until you get used to the syntax it's going to seem.

565
01:27:55.290 --> 01:27:55.950
MS Analytics Class 2021: Just.

566
01:27:57.330 --> 01:27:58.890
MS Analytics Class 2021: is not going to seem very natural.

567
01:28:00.630 --> 01:28:01.590
MS Analytics Class 2021: Alright, so.

568
01:28:03.690 --> 01:28:05.730
MS Analytics Class 2021: Again we're kind of going back to.

569
01:28:07.380 --> 01:28:20.130
MS Analytics Class 2021: The different types of declaration statements so we've seen to this point declaration statements for model elements declaring variables declaring now we seen implicit variables constraints in objective.

570
01:28:21.360 --> 01:28:29.670
MS Analytics Class 2021: Now we are going to get into that other part where we declare set some parameters and you can think of what's going on there as.

571
01:28:31.290 --> 01:28:43.170
MS Analytics Class 2021: A way to organize and store the data for your model okay so here for the furniture making problem is all of the data that we might use to build our model.

572
01:28:44.310 --> 01:28:55.920
MS Analytics Class 2021: And, as a first step we're going to take that data and store it in pocket model, you can think of it as you know, occupying some virtual space right.

573
01:28:56.820 --> 01:29:08.220
MS Analytics Class 2021: Once we have the data store, then we use those parameters and parameter arrays to build our formulation but we'll take it in two steps, the first step will be.

574
01:29:09.540 --> 01:29:11.670
MS Analytics Class 2021: kind of organizing and storing the data.

575
01:29:12.690 --> 01:29:21.630
MS Analytics Class 2021: And so, this is an element that you will see for basically any programming language, and in some sense prakash model.

576
01:29:21.960 --> 01:29:34.650
MS Analytics Class 2021: Is an algebraic modeling language for building and solving models, but it's also has the elements of programming language so many of the same constructs you'll see here in pocket model so.

577
01:29:35.700 --> 01:29:54.720
MS Analytics Class 2021: I kind of picture here parameter array as kind of storage for Bowling shoes and each one of those locations, maybe i'm storing a number right that's the data from my problem and then all use ways to reference those data locations in order to build a model.

578
01:29:56.040 --> 01:30:05.520
MS Analytics Class 2021: Okay, so for parameters and parameters and think of it as picturing a parameter array, but if you just took one box that could be one storage location for a parameter.

579
01:30:06.810 --> 01:30:20.010
MS Analytics Class 2021: We can assign values to parameters and parameter race and we'll start by doing that, but ultimately typically what we'll do is read them from stuffs datasets which you can.

580
01:30:20.490 --> 01:30:35.310
MS Analytics Class 2021: convert other data sets to SAS data sets their profit model, for example, has a problem, I mean Sasha has a proper import that will convert an excel spreadsheet to assess data set and then you can read that SAS data set in the pocket model.

581
01:30:37.650 --> 01:30:46.860
MS Analytics Class 2021: If we want to find out what's in our parameter locations, we can use the print statement, the same way that we've done to print the values of the decision variables okay.

582
01:30:48.000 --> 01:30:57.210
MS Analytics Class 2021: The thing about parameters and parameter arrays is the role that they play in building and solving models is they determine the kind of limits and boundaries of our model.

583
01:30:57.600 --> 01:31:08.310
MS Analytics Class 2021: right there the coefficients there the limits there the objective function coefficients that the balance on the variables, so the solver takes the model and.

584
01:31:09.870 --> 01:31:21.660
MS Analytics Class 2021: changes the values of the decision variables to find the best solution it doesn't change the values of the parameters right so it's kind of a philosophical difference between parameters and decision variables.

585
01:31:22.380 --> 01:31:33.060
MS Analytics Class 2021: So finally i'm going to show you what my my conventions are because i'm going to start to declare parameters and I have a special way of.

586
01:31:33.840 --> 01:31:52.380
MS Analytics Class 2021: indicating which elements are parameters which are decision variables, which are constraints, by using capitalization so for variables and objectives, including implicit variables i'll use that Campbell case right capitalizing the first letter of each word.

587
01:31:53.400 --> 01:32:06.900
MS Analytics Class 2021: For parameter names i'll use all lowercase and, if I have a parameter called unit cost i'll use an underscore between unit and cost distinguished where one word ends and another one starts.

588
01:32:07.710 --> 01:32:17.700
MS Analytics Class 2021: i'll also have occasion to talk about a special kind of parameter all the set and for sets i'll use all uppercase but i'll remind you of that we actually see a set.

589
01:32:19.140 --> 01:32:30.060
MS Analytics Class 2021: Okay constraint names you wouldn't have noticed it for the furniture making problem but i'm only going to capitalize the first letter, but when the names are Labor metal and what are the only consists of a single word.

590
01:32:30.420 --> 01:32:47.280
MS Analytics Class 2021: That doesn't really make a difference, but if I had something like budget underscore co n for the budget constraint that would be more typical of capitalizing just the first letter and thereafter using underscores so you'll get used to this and in.

591
01:32:48.630 --> 01:33:01.800
MS Analytics Class 2021: The resource which i'll send you a link to there is a book of examples of optimization models that is a good follow up to what we see in class.

592
01:33:02.430 --> 01:33:08.820
MS Analytics Class 2021: To see if there's anything that's germane to your area or also just to get more practice, they also follow the same.

593
01:33:09.270 --> 01:33:24.570
MS Analytics Class 2021: type of graphical conventions, so what why even bother, why not everything is lowercase because this allows you to look at a model and say oh that thing that's represented by a SAS thing that's the parameter just helps you parse the Program.

594
01:33:26.640 --> 01:33:31.800
MS Analytics Class 2021: Alright, so what we're going to use basically here is the parameter names are all lowercase.

595
01:33:33.480 --> 01:33:47.070
MS Analytics Class 2021: So i'm going to start to kind of peel off the different parts of the furniture making data and let's start with the selling price right, so this is that part of the table.

596
01:33:48.300 --> 01:33:53.610
MS Analytics Class 2021: And I can imagine this being out there in virtual space somewhere.

597
01:33:55.590 --> 01:34:11.280
MS Analytics Class 2021: How can I refer to the selling price of desks or the selling price of chairs and you know way to refer to that data location and to do that why use what's called an index sets right and some examples of it are below.

598
01:34:11.940 --> 01:34:22.140
MS Analytics Class 2021: So I can use numerical indexing I can say this is selling price one selling price to selling price three and selling price for okay perfectly valid very mathematical.

599
01:34:23.250 --> 01:34:38.400
MS Analytics Class 2021: In the SAS data step programming, I might want to say, instead of 1234 as strings P one P for because they represent products, it makes it a little bit more easier to understand what i'm actually referring to that that index.

600
01:34:39.480 --> 01:34:50.190
MS Analytics Class 2021: pocket model allows me to use strings as the elements of my index set, and so, if I asked and I realized this is quite a leading question.

601
01:34:50.910 --> 01:35:02.790
MS Analytics Class 2021: Which potential index, that is the most indicative of the problem context well obviously it's not 1234 because that gives you no idea what that represents the second one is a little better.

602
01:35:03.810 --> 01:35:10.740
MS Analytics Class 2021: But, in fact, using the names of, in this case the products as the indexes.

603
01:35:11.310 --> 01:35:23.340
MS Analytics Class 2021: makes it much easier to identify what this is it's the selling price of desks as a string right, so the index set his desk chairs bookcases in bed frames.

604
01:35:24.210 --> 01:35:32.970
MS Analytics Class 2021: And it's much more natural and tie closer to the problem context and in proc up model, we will name and declare our index sets.

605
01:35:33.570 --> 01:35:52.860
MS Analytics Class 2021: And so I want to name the index set something that's indicative of the role it plays in the business problem, so I might call this index set products, and this is the object that I said we would use all caps for right all lowercase for selling price all uppercase for index sets right.

606
01:35:54.930 --> 01:36:08.070
MS Analytics Class 2021: So in in in pocket model I would think of that is kind of carving off some space in memory storing the values there and then referring to them using an index.

607
01:36:10.860 --> 01:36:17.430
MS Analytics Class 2021: Right so let's look at our data and here's where I think about organizing and storing the data.

608
01:36:18.150 --> 01:36:36.450
MS Analytics Class 2021: So, not only would I need a set of products, but because some of the information is defined over the resources Labor metal and would I would probably also need a set of resources and then I can index all of the data using a combination of products and resources.

609
01:36:37.710 --> 01:36:40.530
MS Analytics Class 2021: so well, not surprisingly.

610
01:36:41.790 --> 01:36:50.400
MS Analytics Class 2021: I need to tell the compiler about this indexing information so if I choose to organize the data in this way.

611
01:36:51.660 --> 01:37:03.420
MS Analytics Class 2021: My first step is to declare these index sets there's a set decoration statement which is pretty easy set name of set and then initialize.

612
01:37:04.260 --> 01:37:10.470
MS Analytics Class 2021: So here are the set of resources is the strings Labor metal and wood, this is.

613
01:37:11.460 --> 01:37:20.280
MS Analytics Class 2021: Between the slashes is what's called you don't have to really to remember this is a set literal expression it's just a an enumeration of the elements of the set.

614
01:37:21.240 --> 01:37:35.760
MS Analytics Class 2021: pocket model has a lot of the limiters so it has parentheses, it has curly braces it has square brackets, it has slashes and a page in the handout if you printed the handout out, I think, maybe the last page.

615
01:37:36.810 --> 01:37:44.190
MS Analytics Class 2021: shows you the different ways in which the limiters argues, so if you see an expression with the limiters and you say what does that mean you can look at that handout.

616
01:37:45.210 --> 01:37:52.650
MS Analytics Class 2021: And the compiler is smart enough to figure out that Labor metal and wood are strings you could put quotes around them, but you don't have to.

617
01:37:53.070 --> 01:38:01.800
MS Analytics Class 2021: If one of the names, you were using had a space, however, you would need quotes if one of the names you're using had a quote you would need double quotes.

618
01:38:02.460 --> 01:38:11.310
MS Analytics Class 2021: Like mcdonald's food could be the name of a string, in which case it has space and quote, and we would need to enclose it in double quotes.

619
01:38:13.080 --> 01:38:19.110
MS Analytics Class 2021: Likewise, the set of products desks chairs the cases in bed friends okay.

620
01:38:20.250 --> 01:38:24.150
MS Analytics Class 2021: So, this would be the very start of our pocket model program it would now say.

621
01:38:24.810 --> 01:38:38.160
MS Analytics Class 2021: pocket model, and then it would have a section for declare set some parameters and the very first thing I would declare as I would declare my sets all right and i'll show you why that is because let's look at now declaring selling price.

622
01:38:40.470 --> 01:38:42.150
MS Analytics Class 2021: Well, selling price.

623
01:38:43.170 --> 01:38:54.600
MS Analytics Class 2021: Is there's a selling price for each product, we say that selling prices indexed by products and the way that that comes through in the declaration statement is.

624
01:38:55.020 --> 01:39:06.180
MS Analytics Class 2021: The name of the index set which is products is enclosed in curly braces right, so the name first selling price the indexing set within curly braces.

625
01:39:06.750 --> 01:39:18.930
MS Analytics Class 2021: So we would say in profit model speak selling prices indexed by products and you wanted to hear that is there is a selling price for each product okay.

626
01:39:20.130 --> 01:39:29.670
MS Analytics Class 2021: And then initialize us here populate those locations in in memory, so it.

627
01:39:31.080 --> 01:39:42.450
MS Analytics Class 2021: initialize is the value for the selling price of desks chairs bookcases in bed frames and you'll see that I put them in the same order as the declaration statement for the set products.

628
01:39:43.140 --> 01:39:57.210
MS Analytics Class 2021: don't get too hung up with that because we read from SAS data sets you won't have to worry about the order at all the sets and the parameter arrays will all be populated from the data set but for now, since we're just initializing i'm using the same order.

629
01:39:58.320 --> 01:40:03.990
MS Analytics Class 2021: And if I can figure out how to do this, let me show you how you would refer to.

630
01:40:05.220 --> 01:40:14.070
MS Analytics Class 2021: The selling price let's say desks what what might we want to do with that we might want to print it, so I realized you won't see this until i'm done typing.

631
01:40:15.360 --> 01:40:16.740
MS Analytics Class 2021: selling price.

632
01:40:22.620 --> 01:40:24.420
MS Analytics Class 2021: We stop selling in here tonight.

633
01:40:26.520 --> 01:40:32.940
MS Analytics Class 2021: Okay, so that would print the selling price of desks so print as we've seen before.

634
01:40:33.000 --> 01:40:34.470
MS Analytics Class 2021: And then the name selling price.

635
01:40:34.830 --> 01:40:37.950
Fireman, Karen: i'm sorry i'm everything is that printed summer.

636
01:40:39.090 --> 01:40:39.600
MS Analytics Class 2021: It should.

637
01:40:39.810 --> 01:40:41.760
Fireman, Karen: I just got it sorry it's.

638
01:40:41.820 --> 01:40:42.510
it's blue.

639
01:40:43.860 --> 01:40:51.000
MS Analytics Class 2021: notice that desks is in quotation marks Okay, because i'm referring to the index location.

640
01:40:51.600 --> 01:41:03.150
MS Analytics Class 2021: As a string and desks the string has quotes Okay, that is, the data location that's the index and so print selling price of desks notice that.

641
01:41:03.990 --> 01:41:14.430
MS Analytics Class 2021: When I do the reference I have square brackets in the declaration statement I have curly braces right but otherwise the name of the parameters same.

642
01:41:15.570 --> 01:41:17.130
MS Analytics Class 2021: will see some more examples in a minute.

643
01:41:18.300 --> 01:41:18.930
MS Analytics Class 2021: Okay, so.

644
01:41:20.070 --> 01:41:30.060
MS Analytics Class 2021: That would print the selling price of just desks, what if I wanted to see all of the selling prices, well, I can say print sorry, let me get rid of this.

645
01:41:36.390 --> 01:41:49.800
MS Analytics Class 2021: I can say print selling price, so I can print a race using print to selling prices that is a one dimensional array if I say print selling price, and here I can see i'm trying to use the same colors as the editor uses.

646
01:41:50.370 --> 01:41:59.640
MS Analytics Class 2021: you'll get an html table that has the names of the products and the selling prices right look, just like this now.

647
01:42:00.810 --> 01:42:08.220
MS Analytics Class 2021: If you are using this table in a report, you probably wouldn't have to have the mysterious floating one you would probably want it to say product.

648
01:42:09.000 --> 01:42:20.340
MS Analytics Class 2021: But proc up model uses the mysterious floating one, as the first index, and so you just kind of going to have to get used to that alright.

649
01:42:21.150 --> 01:42:33.570
MS Analytics Class 2021: Alright, so that you can print that out let's look at the other data that we have here, so we have selling price for each product, and then I have cost and availability for each resource.

650
01:42:34.530 --> 01:42:46.980
MS Analytics Class 2021: So i'm i'm kind of repeating the declaration for the set you wouldn't repeated over and over again in the program i'm just trying to show you proximate to the declaration statement for in this case cost.

651
01:42:47.970 --> 01:42:59.640
MS Analytics Class 2021: So cost is indexed by resources, so I would use curly braces around resources and then I would use initialize years, so the resources are Labor metal and wood.

652
01:43:00.060 --> 01:43:11.490
MS Analytics Class 2021: The cost of Labor metal and wood is 1420 and 11 OK, so those are the initial users here and, likewise, I could say print cost of Labor using quotes around Labor.

653
01:43:13.980 --> 01:43:24.510
MS Analytics Class 2021: Well, availability is not a big jump from cost the names changed num availability so numb stands for a numerical parameter re.

654
01:43:25.980 --> 01:43:32.970
MS Analytics Class 2021: initialize to these values, and I could say print availability and it would give me a table of the values of availability.

655
01:43:34.110 --> 01:43:46.650
MS Analytics Class 2021: Right so in some sense that's the low hanging fruit what's going to maybe be a little more tricky is this block of data that's index both by products and resources which tells you.

656
01:43:47.550 --> 01:44:01.440
MS Analytics Class 2021: How much of each resource is required to make each product okay so i'm just going to call that required it's a two dimensional parameter Ray okay so numb numerical parameter re required.

657
01:44:02.730 --> 01:44:11.070
MS Analytics Class 2021: it's indexed by products and resources so inside the curly braces I put products comma resources you don't need the space here.

658
01:44:11.520 --> 01:44:18.840
MS Analytics Class 2021: But I think it makes it a little bit easier to parse with the spaces, so the compiler is the compiler does ignores.

659
01:44:19.410 --> 01:44:28.290
MS Analytics Class 2021: Blank lines in as long as you don't go crazy with it in the wrong place, it also ignores blank spaces okay.

660
01:44:29.010 --> 01:44:44.520
MS Analytics Class 2021: Obviously, if I put a blank space between book and cases that wouldn't work, but here I can put as many blank spaces between products and resources, the comma, I can put blank spaces more around the equal sign I could take them out, as you wish.

661
01:44:45.540 --> 01:44:49.800
MS Analytics Class 2021: So when i'm initializing a two dimensional parameter array like this.

662
01:44:50.190 --> 01:45:01.440
MS Analytics Class 2021: It goes row wise, although the compiler doesn't know rows and columns because it doesn't visualize the data it knows the first index, and the second index, so it knows.

663
01:45:01.920 --> 01:45:23.730
MS Analytics Class 2021: For each of the first index for all of the second index and to maybe make that clear I could add in some spaces right indicate this is 2131133142 and four or, if you want to go crazy you could use carriage returns and make it look like a matrix Okay, so that is.

664
01:45:24.930 --> 01:45:32.850
MS Analytics Class 2021: A way to store the data for the furniture making problem in numerical parameter race right.

665
01:45:34.140 --> 01:45:40.470
MS Analytics Class 2021: Now let me tell you just go from that specific example to the more general setting.

666
01:45:44.670 --> 01:45:55.890
MS Analytics Class 2021: So we might have other occasions to declare numerical parameters and pocket model, think about how you use a parameter and a program just a source of information.

667
01:45:56.670 --> 01:46:04.530
MS Analytics Class 2021: So here i'm declaring the miracle parameter in and our naming Convention is lowercase right.

668
01:46:05.250 --> 01:46:14.760
MS Analytics Class 2021: This one's not initialized you don't have to initialize parameters, you can assign them values later here is a numerical parameter called pi which I initialize.

669
01:46:15.570 --> 01:46:28.650
MS Analytics Class 2021: And i'm initializing it to the value of a SAS function, which is calculates the value of the universal constant pie in whatever machine language you're in so to the precision, that you can actually store.

670
01:46:31.560 --> 01:46:50.550
MS Analytics Class 2021: My could have said num pie equals three, but the biblical value is a little bit in precise doesn't have to be a number, it can be an expression okay so here's a numerical parameter array it's a two dimensional parameter raised like an n by n matrix.

671
01:46:51.690 --> 01:47:03.600
MS Analytics Class 2021: And here, instead of using an equal sign i'm using something that's more flexible called niche for initializing the difference between a knit and equals here is that.

672
01:47:04.920 --> 01:47:12.300
MS Analytics Class 2021: If you use equals you can't change the value right you're stuck with 3.14159 that dumb value I hate it.

673
01:47:13.320 --> 01:47:18.930
MS Analytics Class 2021: You can't change it to three if you use it in it, you can change the value later in the Program.

674
01:47:19.530 --> 01:47:32.250
MS Analytics Class 2021: Okay, the initial values are stored there, but you can override them with other values so depending on how the numerical parameter rate enters into your program you might want to choose one or the other notice that.

675
01:47:33.450 --> 01:47:44.790
MS Analytics Class 2021: This doesn't necessarily can carve out space in memory right, this is more about syntactical correctness, at this point the compiler is checking this to say.

676
01:47:45.390 --> 01:48:00.840
MS Analytics Class 2021: What the types of everything are because it can't really allocate memory for this matrix because it doesn't know what n is right, so we don't know if any 01 if it's 10 we haven't assigned to the value yet right.

677
01:48:02.550 --> 01:48:20.250
MS Analytics Class 2021: Okay, so, but this equal sign is also used in other ways in programming, so it could be used as an initialize it like this, or it can be used to assign values to parameters or decision variables, and that is also true in pocket model, so let me show you.

678
01:48:21.420 --> 01:48:24.420
MS Analytics Class 2021: That we could after that code.

679
01:48:25.500 --> 01:48:28.800
MS Analytics Class 2021: We can assign the value of two to end.

680
01:48:29.970 --> 01:48:41.100
MS Analytics Class 2021: And then it becomes a man becomes a two by two matrix like you see over here, I can replace the value of the one one entry of matt with pie.

681
01:48:41.760 --> 01:48:50.070
MS Analytics Class 2021: The value of pie in our machine language actually what you see here is the precision of the print statement in memory it's it's bigger than this it's longer.

682
01:48:51.330 --> 01:48:54.660
MS Analytics Class 2021: And so, when I print matt it prints two dimensional table.

683
01:48:56.160 --> 01:49:00.420
MS Analytics Class 2021: Okay, so you can use assignment statements in the program code.

684
01:49:01.650 --> 01:49:06.360
MS Analytics Class 2021: Not just equal signs in initializing the values of parameters.

685
01:49:07.410 --> 01:49:11.280
MS Analytics Class 2021: Okay, so and we can assign values to decision variables as well.

686
01:49:12.300 --> 01:49:25.320
MS Analytics Class 2021: Which for linear programming is not really something that matters because the algorithms for solving linear programming models ignore the initial values of the decision variables doesn't use that information to try and jumpstart the the method.

687
01:49:25.800 --> 01:49:45.450
MS Analytics Class 2021: Whereas for non linear programming models, it always starts from the values you supplied to the decision variables, so in that case initializing the values of decision variables is important, and you could read their values from a data set or assignment using n equals an assignment statement.

688
01:49:48.000 --> 01:49:49.110
MS Analytics Class 2021: Okay, so.

689
01:49:50.250 --> 01:50:00.960
MS Analytics Class 2021: Those are numerical parameters and most of the parameters that you define us in building an optimization model will be numerical parameters right think about the data, you have for the problem.

690
01:50:01.290 --> 01:50:20.880
MS Analytics Class 2021: Most of the columns of your table are numerical columns but you might also had occasion to have string value parameters or parameter arrays and the capability in pocket model is there you just declare them differently, you instead of numb for numerical use str for string.

691
01:50:22.320 --> 01:50:25.020
MS Analytics Class 2021: So here's a single parameter called name.

692
01:50:26.730 --> 01:50:35.190
MS Analytics Class 2021: For obvious uses here is an array of strings, these are the two letter abbreviation for the days of the week.

693
01:50:36.870 --> 01:50:49.110
MS Analytics Class 2021: We probably aren't going to go around changing the names of the days of the week so equals is probably a good choice here unless we're French Canadian and we might want to switch between French and English, so you could use a net there.

694
01:50:50.340 --> 01:50:57.630
MS Analytics Class 2021: Here is an array think about the furniture making problem that might help us distinguish between.

695
01:50:57.930 --> 01:51:09.570
MS Analytics Class 2021: Human resources and material resources, possibly for a larger product next problem, because the for the furniture making problems there's not that many resources so that would be string value.

696
01:51:11.160 --> 01:51:28.920
MS Analytics Class 2021: Let me kind of flesh that out to show you again how the assignment statement can be used because the assignment statements i've used up above use numerical indexing whereas this if resources is from the furniture making problem it's a set of strings oops sorry.

697
01:51:34.080 --> 01:51:47.280
MS Analytics Class 2021: So let's say we want to have all material resources that would be for for wood and metal but human resource for Labor because initialize the type to be material.

698
01:51:47.970 --> 01:52:06.000
MS Analytics Class 2021: number in it gives us the capability of overriding and then we could say type of Labor is human right so notice the quotes around both Labor the index and human the string right they're both strings now if I admitted to strings here around Labor.

699
01:52:07.050 --> 01:52:19.500
MS Analytics Class 2021: Then the compiler would assume that there was a parameter named Labor which would have to have been declared and would have to have been declared a string to make this expression makes sense.

700
01:52:20.850 --> 01:52:32.400
MS Analytics Class 2021: But if I didn't declare it as a parameter I would get us some text here okay so we'll see when we expand the model, and we have.

701
01:52:33.060 --> 01:52:42.750
MS Analytics Class 2021: strings used index the names of our variables, the compiler is a little bit sloppy and whether it puts the quotes there are not thinking that we don't really need them.

702
01:52:43.110 --> 01:52:48.750
MS Analytics Class 2021: But when you're talking to the compiler you better have those strings there where you're going to get some syntax errors.

703
01:52:50.250 --> 01:52:52.530
MS Analytics Class 2021: All right, so last thing is sets.

704
01:52:53.730 --> 01:53:03.720
MS Analytics Class 2021: And we've seen sets declared for the furniture making problem they were sets of strings right Labor metal and wood or.

705
01:53:05.190 --> 01:53:12.180
MS Analytics Class 2021: desk chairs bookcases in bed friends two sets of strength well, you can have sets of strings you can also have sets of numbers.

706
01:53:12.930 --> 01:53:33.240
MS Analytics Class 2021: And you can have sets of pairs of numbers in pairs and strings and tables that are mixed so you can have all kinds of different funky index sets so here's here's a set of numbers, the type tells you what the typical element of the set is numbers strings pairs of numbers mixed bags.

707
01:53:34.950 --> 01:53:47.370
MS Analytics Class 2021: So here 60s, is a set of numbers and i've initialized it using a range expression in pocket model this abbreviation means the numbers from 1962 1969 few remember those.

708
01:53:48.930 --> 01:53:56.700
MS Analytics Class 2021: here's a set of strings called cities initialize to carry a New York notice that New York has a space, so I need the quotes.

709
01:53:57.420 --> 01:54:06.090
MS Analytics Class 2021: Again, the slashes are a set literal expression here's a set of parts were a part has a name which consists of a string and the number.

710
01:54:06.570 --> 01:54:16.230
MS Analytics Class 2021: But the number the lead the string could be a part, family and then the number is which member of the family, it is So these are tools, you can see i'm using the.

711
01:54:17.610 --> 01:54:34.260
MS Analytics Class 2021: The angle brackets also called but one of my SAS colleagues duck lips, and finally, I have a set of pairs of strings which could describe the arcs in the network we'll talk a little bit more about that structure later.

712
01:54:36.000 --> 01:54:48.060
MS Analytics Class 2021: You might say, well, when you declared the index sets products and resources you didn't have a type, why not well if the type is if it's initialized.

713
01:54:48.810 --> 01:54:54.690
MS Analytics Class 2021: The type is implicit so you don't have to declare the type of 16th because it's a set of numbers.

714
01:54:55.230 --> 01:55:05.910
MS Analytics Class 2021: You don't have to declare the type of cities, because it's a set of strings because the initialize was our strengths likewise parts, but arts notice here is not initialized.

715
01:55:06.780 --> 01:55:18.120
MS Analytics Class 2021: And the default set the default type of a set is instead of numbers, so if I don't declare the type of the set arcs i'm going to get a set of numbers and that's obviously not what I intend here.

716
01:55:18.780 --> 01:55:33.390
MS Analytics Class 2021: So I have to declare the type in less it has an issue lighters okay there's nothing wrong with, including the tight to be explicit but it's not necessary, the compiler will figure it out, if you have initialized.

717
01:55:35.430 --> 01:55:41.100
Zuberi, Bilal: Professor just for my understanding, can you leverage so parts is kind of a double the right.

718
01:55:42.180 --> 01:55:47.670
MS Analytics Class 2021: yeah it's it's before we had we had required, which was indexed by products and.

719
01:55:47.670 --> 01:55:50.070
MS Analytics Class 2021: Resources rights as a two dimensional right.

720
01:55:52.530 --> 01:56:00.240
MS Analytics Class 2021: That was in some sense like full there was there was something for every combination of product and resource.

721
01:56:00.840 --> 01:56:21.990
MS Analytics Class 2021: But, in some cases like, in this case for parts, they may be, only some combinations of of a string and a number that define a park right, and so we might have a set of those two dimensional objects that describe the names of the parts it's not kind of it's not.

722
01:56:23.370 --> 01:56:34.770
MS Analytics Class 2021: Allocating space for a parameter array but we could index something by parts, in which case it would have that weird structure and we will want to reference it in that way.

723
01:56:35.880 --> 01:56:53.130
MS Analytics Class 2021: I would say that's kind of a typical but it kind of depends on how you store the data for for the problems that you want to solve think about data that you would use to come up with a problem, how is it stored, you know what are the, what are the, what are the the column names.

724
01:56:54.180 --> 01:56:55.170
MS Analytics Class 2021: In the spreadsheet.

725
01:56:57.510 --> 01:56:58.560
MS Analytics Class 2021: Alright, so.

726
01:57:02.550 --> 01:57:03.540
MS Analytics Class 2021: I talked about.

727
01:57:04.770 --> 01:57:19.380
MS Analytics Class 2021: Organizing and storing information in pocket model so now the kind of preamble of our program is declare set some parameters and until we learn how to read data from SAS data sets.

728
01:57:20.280 --> 01:57:28.770
MS Analytics Class 2021: we're going to be initializing all of our parameters, instead of reading the data from an external file or data set.

729
01:57:30.240 --> 01:57:41.310
MS Analytics Class 2021: we'll get to that in the next in the next class, but once we've stored our data now we want to use those parameter arrays to build our model right.

730
01:57:42.780 --> 01:57:45.420
MS Analytics Class 2021: And here's where it gets a little bit.

731
01:57:46.650 --> 01:57:58.680
MS Analytics Class 2021: A little bit abstract so bear with me as we, as we see more models, it will seem more natural but at first it's going to seem a little bit abstract.

732
01:58:00.120 --> 01:58:02.340
MS Analytics Class 2021: OK, so the idea is that.

733
01:58:03.990 --> 01:58:07.470
MS Analytics Class 2021: In the same way that we've kind of organize the data for our problem.

734
01:58:09.720 --> 01:58:18.930
MS Analytics Class 2021: You can think about is kind of maybe this is in a spreadsheet somewhere right we'll think about other model elements.

735
01:58:19.920 --> 01:58:30.180
MS Analytics Class 2021: We could kind of group them into a raise of decision variables arrays of implicit variables arrays of constraints.

736
01:58:30.960 --> 01:58:52.860
MS Analytics Class 2021: Where they have similar properties, but they differ by some index like a product or a resource, so the same kind of declaring parameter arrays that same idea could be used to declare arrays of model elements decision variables and so forth, and so that's where we move from here.

737
01:58:54.030 --> 01:59:00.750
MS Analytics Class 2021: So let's look at a simple example to start with again i'm going to use the illustration of the furniture making problem.

738
01:59:02.490 --> 01:59:19.890
MS Analytics Class 2021: You can think of it as i'm kind of building up the formulation of the furniture making problem using arrays and index sets it's it's it's going to solve the same model it's just going to be using kind of a different syntax to build the model.

739
01:59:21.180 --> 01:59:34.230
MS Analytics Class 2021: But all of the all the structures that we saw before are going to be reproduced in this kind of new new syntax new language so i'm going to declare an array of decision variables.

740
01:59:35.370 --> 01:59:46.800
MS Analytics Class 2021: So, before I had the decision variables were named desks chairs bookcases in bed frames, but they all represented a common thing it was how much of each product to make.

741
01:59:47.610 --> 02:00:04.080
MS Analytics Class 2021: So now i'm going to declare an array of decision variables so i'm going to think of a name that kind of gives that general what they measure so i'll call it num prod for number produced so that's going to be the name of my array of decision variables.

742
02:00:05.160 --> 02:00:11.460
MS Analytics Class 2021: Just like a parameter array i'll say over what said is that indexed meaning.

743
02:00:12.390 --> 02:00:22.860
MS Analytics Class 2021: nonprofit is defined for what set nonprofit of desks and i'm proud of chairs and i'm proud of bookcases so it's defined for the products, so I had the name.

744
02:00:23.460 --> 02:00:35.130
MS Analytics Class 2021: An index set in curly braces and then, just like an ordinary variable declaration statement fun facts, where are these fun facts apply to the whole array now.

745
02:00:36.030 --> 02:00:46.740
MS Analytics Class 2021: So before death was not negative chairs was non negative now non prod is all non negative that fun fact applies to every Member of this family.

746
02:00:47.700 --> 02:00:54.330
MS Analytics Class 2021: So you can think of it, if you will, if it was a spreadsheet somewhere in the spreadsheet that would be spaces.

747
02:00:55.050 --> 02:01:06.030
MS Analytics Class 2021: Where a kind of like a temporary workspace where the where the solver would be changing the values of desks chairs bookcases in bed friends, and you can kind of conceptually think of that memory allocation as.

748
02:01:07.080 --> 02:01:27.390
MS Analytics Class 2021: The as the space that num product you pies now I have zeros here because, unlike parameters which don't have a default value until you until you set that value decision variables all have a default initial value of zero.

749
02:01:28.410 --> 02:01:35.430
MS Analytics Class 2021: So if you just declare them proud and then you say print nonprofits going to have zeros for everything not not very, very.

750
02:01:37.140 --> 02:01:45.120
MS Analytics Class 2021: Not generating a lot of revenue, let us say, but that's what the zeros here are therefore to represent the initial values of the decision variables.

751
02:01:47.070 --> 02:01:48.270
MS Analytics Class 2021: Alright, so.

752
02:01:50.070 --> 02:02:06.060
MS Analytics Class 2021: What we were calling desks before has a new name, which is numb prod of desks right square brackets to refer to a specific array location declaration statement with curly braces right.

753
02:02:07.530 --> 02:02:19.590
MS Analytics Class 2021: So this is more wordy but it's also more explicit about what it calculates and holds right it's the number of desks that we're going to produce okay.

754
02:02:23.130 --> 02:02:34.080
MS Analytics Class 2021: Alright, so again in the syntax is it takes a little getting used to like winter winter remember to use the curly braces and when to use the the square brackets.

755
02:02:34.770 --> 02:02:47.130
MS Analytics Class 2021: Part of that is made easier because of the syntax suggestions that are offered to you in SAS studio right it comes up with the syntax of the declaration statement when you start to type it.

756
02:02:48.330 --> 02:03:07.830
MS Analytics Class 2021: But invariably you're going to find like you can't remember any use parentheses or use parentheses here and that won't work it always has to be the special the limiter that is reserved for that part of the syntax and it'll show you in log file say look.

757
02:03:08.910 --> 02:03:11.850
MS Analytics Class 2021: Wrong wrong collimator here are the choices that would work.

758
02:03:13.170 --> 02:03:15.630
MS Analytics Class 2021: All right, and as i've suggested to you in your homework.

759
02:03:17.160 --> 02:03:26.910
MS Analytics Class 2021: try and make some syntax errors and see what the what the explanations of are in the log file it's going to take some getting used to those explanations are a little bit.

760
02:03:29.010 --> 02:03:31.170
MS Analytics Class 2021: Strange at first until you get used to them.

761
02:03:32.730 --> 02:03:33.750
MS Analytics Class 2021: Okay, so that's.

762
02:03:34.860 --> 02:03:53.130
MS Analytics Class 2021: Our specific case for declaring an array of decision variables, the general syntax is a comma separated list and the things that are separated by commas are called their declarations and each very declaration can be the name of a variable.

763
02:03:54.600 --> 02:04:08.130
MS Analytics Class 2021: The name of an array if you include an index set and can have options, those are the fun facts and for linear programming the fun facts that we would use our bounds.

764
02:04:09.960 --> 02:04:15.720
MS Analytics Class 2021: In some cases like non linear programming models, you might have an initial value so you could have a knit there.

765
02:04:16.560 --> 02:04:28.800
MS Analytics Class 2021: And as as was asked by a student, if you want to declare a variable to be integer binary that can also be added as fun fact you might want to try, that in the furniture making model and see what happens, but for now.

766
02:04:29.130 --> 02:04:34.980
MS Analytics Class 2021: we're pull punt on that and get back to it later so for linear programming it's basically just found.

767
02:04:36.330 --> 02:04:47.220
MS Analytics Class 2021: The picture on the right is to help you remember that, in this case the expressions have to be numeric expressions right, it could be a number like zero.

768
02:04:47.760 --> 02:05:00.150
MS Analytics Class 2021: or something that evaluates to a number, so you can't have a lower bound that's a variable expression or an upper bound it's a variable expression or initial value that's a variable expression.

769
02:05:01.410 --> 02:05:08.640
MS Analytics Class 2021: That could be entered into as a constraint, but not in the declaration statement for decision variable.

770
02:05:09.840 --> 02:05:21.960
MS Analytics Class 2021: Okay, so that's the general syntax and in the handout if you print it out, are these syntax boxes, for all the different types of declaration statements, because that's something you're going to commonly want to refer back to.

771
02:05:24.420 --> 02:05:27.060
MS Analytics Class 2021: Okay, so those are decision variables.

772
02:05:28.590 --> 02:05:39.000
MS Analytics Class 2021: And if we kind of look at our progress i'll be somewhat limited here our program would look like this, our first section, where we declare set some parameters.

773
02:05:39.450 --> 02:05:48.390
MS Analytics Class 2021: This is going back to just after the break to clarity the sets resources and products declaring costs selling price availability required.

774
02:05:49.560 --> 02:05:55.590
MS Analytics Class 2021: Then we move on to the variables, and here we be declaring non prod indexed by products.

775
02:05:56.700 --> 02:06:07.200
MS Analytics Class 2021: And, followed by if we wanted to use some implicit variables here and then constraints and the objective we have some from some.

776
02:06:08.700 --> 02:06:17.850
MS Analytics Class 2021: We could declare the objective before the constraints doesn't really matter just the general rule is, you have to declare something before you use it or refer to it, lower in the Program.

777
02:06:19.110 --> 02:06:23.340
MS Analytics Class 2021: I kind of like to have the objective right next to the solve because it's in some sense, the bottom line.

778
02:06:26.160 --> 02:06:37.050
MS Analytics Class 2021: So if we think about it, the difference between a variable a decision variable and an implicit variable, this is the implicit variable has this defining expression.

779
02:06:38.190 --> 02:06:48.390
MS Analytics Class 2021: And the defining expression is usually not a simple thing it's like a bunch of things added together, think about calculating hrs or lb.

780
02:06:48.870 --> 02:07:05.460
MS Analytics Class 2021: s or FT three right the variable expressions for the number of hours of Labor units of metal or cubic feet of wood they involve summations and that's The next thing we're going to look at so.

781
02:07:06.660 --> 02:07:14.910
MS Analytics Class 2021: The pluses fine if you have four if you have 400 that's a lot of pluses right, so you want a way to be able to add things up.

782
02:07:16.020 --> 02:07:23.070
MS Analytics Class 2021: Over index sets that's kind of necessary, by the way, that we've chosen to store and organize our data so.

783
02:07:24.150 --> 02:07:41.670
MS Analytics Class 2021: let's look at how we use sums in pocket model so ideally if we wanted to do a some like this, adding the first 24 squares mean we really want to just kind of draw it out, so let me see if I can do this.

784
02:07:42.900 --> 02:07:55.440
MS Analytics Class 2021: i'll do it under the under the staff, here we have a summation of you like K sorry i'm left handed says this that's why this is looking bad 24.

785
02:07:56.790 --> 02:07:58.080
MS Analytics Class 2021: And K squared.

786
02:07:59.490 --> 02:08:11.070
MS Analytics Class 2021: Okay that'd be great if we could do that, but that stack it's not linear and an expression in pocket model is not going to be able to have exactly that look to it.

787
02:08:11.820 --> 02:08:29.520
MS Analytics Class 2021: So this is kind of compromise, so, if you look at the the sum is the Sigma here, but we use the word some and this index of summation here, instead of being on top, and on the bottom gets flattened out.

788
02:08:31.290 --> 02:08:43.740
MS Analytics Class 2021: In pocket model that index of summation has a special name it's called a local dummy parameter has occurs in a number of different places and then there's the actual terms that were something.

789
02:08:45.510 --> 02:08:59.580
MS Analytics Class 2021: You can see here, so they didn't they didn't nail it exactly but it's close ish so this calculates the some of the first 24 squares, which turns out to the 4900 and you could, if you were.

790
02:09:00.660 --> 02:09:11.100
MS Analytics Class 2021: If you were popeye the sailor man, you could stack up cannonballs to represent that some well that's a lot of cannonballs drugs sink the ship if it was 2424 high.

791
02:09:12.180 --> 02:09:19.110
MS Analytics Class 2021: At any rate, this is an example of adding up numeric terms, using a some.

792
02:09:20.250 --> 02:09:32.310
MS Analytics Class 2021: In pocket model in building optimization models generally what we're doing is we're adding up variable terms variable expressions to calculate some quantity on a model.

793
02:09:33.540 --> 02:09:36.780
MS Analytics Class 2021: So just a reminder here sorry.

794
02:09:41.640 --> 02:09:44.700
MS Analytics Class 2021: Mr as a reminder here whoops there we go.

795
02:09:46.380 --> 02:09:48.750
MS Analytics Class 2021: This is the local dummy parameter.

796
02:09:49.830 --> 02:09:55.020
MS Analytics Class 2021: index of summation it wouldn't be read in the in the editor but i'm just trying to draw your attention to it.

797
02:09:55.740 --> 02:10:03.210
MS Analytics Class 2021: One thing about local dummy parameters is that you don't need to declare them it's kind of like let's say you said print this expression.

798
02:10:03.870 --> 02:10:10.020
MS Analytics Class 2021: And the next line, you said pre K in it the name of the local dummy parameter the compiler would say.

799
02:10:10.650 --> 02:10:20.220
MS Analytics Class 2021: What are you talking about I don't know anything you up K is not been is not known outside this expression inside the expression it plays the role.

800
02:10:20.880 --> 02:10:34.800
MS Analytics Class 2021: But outside the expression it's not declared it's not known, so it would say, I have no idea what you're talking about it's like what they say what happens in Vegas stays in Vegas right, so it only has a role internal to this some.

801
02:10:35.880 --> 02:10:39.240
MS Analytics Class 2021: Local dummy parameter see many, many examples.

802
02:10:40.260 --> 02:10:43.380
MS Analytics Class 2021: Okay, so let's look at an example where we have variable terms.

803
02:10:45.510 --> 02:10:50.190
MS Analytics Class 2021: So we talked about possibly adding revenue as an additional implicit variable.

804
02:10:51.420 --> 02:10:59.280
MS Analytics Class 2021: In the setting where we have a raised an index sets this is how we would calculate the implicit variable revenue.

805
02:10:59.880 --> 02:11:10.020
MS Analytics Class 2021: Okay, so in their revenues, the name equals the expression that defines it it's the sum over pn products selling price times number one.

806
02:11:10.740 --> 02:11:21.240
MS Analytics Class 2021: Okay, so now i'm products, how many you produce selling price is the price and selling price so each of these terms is the revenue generated by one particular product.

807
02:11:21.840 --> 02:11:30.720
MS Analytics Class 2021: Q summit over all the products and you get the the overall revenue right so again this this is going to look it's going to look weird.

808
02:11:31.260 --> 02:11:48.810
MS Analytics Class 2021: Until you kind of get to the point where you can look at an expression like this and parse it that's the first step second step is actually producing it on your own without syntax errors right remembering where the curly braces are used and where the square brackets are used right.

809
02:11:50.160 --> 02:12:00.390
MS Analytics Class 2021: So this is the index of summation it's a set curly braces These are specific array locations, so they have the the square brackets.

810
02:12:02.370 --> 02:12:11.430
MS Analytics Class 2021: Now there could be some confusion here, in the sense that maybe what we're doing here is we're adding up the selling prices and then multiply it by non prod.

811
02:12:12.930 --> 02:12:21.210
MS Analytics Class 2021: that's not the case we're adding up the products of these two terms and another way to express that is.

812
02:12:21.810 --> 02:12:37.410
MS Analytics Class 2021: That in the order of operations, the some operator an aggregation operator, some people say aggravation operator, but it's actually an aggregation operator, because it brings lots of things together, like multiple terms.

813
02:12:38.460 --> 02:12:57.570
MS Analytics Class 2021: It falls between addition and subtraction and multiplication and division, so it does the multiplication first and then it does the sun, and if you weren't sure you could add parentheses parentheses, in fact, are free, as long as you use them in match pairs.

814
02:12:58.770 --> 02:13:08.610
MS Analytics Class 2021: This is a picture designed to help you remember the acronym is purple elephants may destroy a school and there are many other ones.

815
02:13:08.910 --> 02:13:21.330
MS Analytics Class 2021: So there is not an acronym for all of the operators and profit models three pages long, there are a lot of operators Okay, this is some is just the one that you're going to use the most.

816
02:13:24.060 --> 02:13:29.820
MS Analytics Class 2021: Alright, so again this idea that P, is a local dummy parameter.

817
02:13:30.870 --> 02:13:35.310
MS Analytics Class 2021: In this case, it's a string the first case K was a number.

818
02:13:36.600 --> 02:13:42.060
MS Analytics Class 2021: And you don't need to declare it just has this brief role that it plays in the calculation of the revenue.

819
02:13:42.990 --> 02:13:57.540
MS Analytics Class 2021: And it could be used, I could have use K, for both of these I could have used it once as a number, and once as a string that might have been kind of confusing to someone reading my program but because it's just local to the expression itself okay.

820
02:13:59.790 --> 02:14:01.110
MS Analytics Class 2021: All right, so.

821
02:14:04.230 --> 02:14:09.600
MS Analytics Class 2021: Let me make an analogy, it is a couple of occasions where i've used an analogy with a spreadsheet.

822
02:14:11.280 --> 02:14:22.950
MS Analytics Class 2021: So you can think about these implicit variables as so an excel you have some some cells that hold a value and other cells, whose value is calculated.

823
02:14:23.490 --> 02:14:33.780
MS Analytics Class 2021: from other cells so implicit variables are like those calculated cells in excel so here, I have a selling price column, I have a number produce or non prod column.

824
02:14:34.560 --> 02:14:51.630
MS Analytics Class 2021: This is the revenue contribution for each product desks chairs bookcases in bed frames it's the product of these two values in the in the proceeding columns and then, if I look at the some of that call that would calculate the revenue.

825
02:14:52.740 --> 02:15:03.120
MS Analytics Class 2021: So that functionality in excel is what this low implicit variable is calculating okay now if you're if you're a.

826
02:15:05.040 --> 02:15:17.250
MS Analytics Class 2021: Heavy user of excel I should I should tell you a few things, yes, I know there is a some prod so you could do this in a single operation there's some products like matrix product dot product.

827
02:15:18.090 --> 02:15:27.780
MS Analytics Class 2021: So, instead of having this in two steps we could have done it in one and the other thing that may be interesting to you is that excel also has a solver for linear programming models.

828
02:15:28.290 --> 02:15:36.600
MS Analytics Class 2021: And I will send you, for example, for the furniture making problem I will send you an excel file that does that same calculation.

829
02:15:38.580 --> 02:15:50.070
MS Analytics Class 2021: Why don't we just do it all in excel well because the free version only solves models, up to a certain size and the solver that's used by excel.

830
02:15:50.580 --> 02:15:58.290
MS Analytics Class 2021: is really not robust enough to solve big models in practice it's fine for for small things.

831
02:15:59.160 --> 02:16:13.920
MS Analytics Class 2021: And and convenient for when the model is is is represented by a spreadsheet is like two dimensional and maybe not three or four dimensional but for larger problems it's just not that's not the right solver to use for business problems.

832
02:16:15.570 --> 02:16:18.120
MS Analytics Class 2021: Okay, so but, but this leads us also to.

833
02:16:19.560 --> 02:16:20.970
MS Analytics Class 2021: This column here.

834
02:16:22.050 --> 02:16:34.050
MS Analytics Class 2021: Is kind of like an intermediate column, but you could think of this as a as an array of implicit variables that calculates the contribution to revenue index by the products.

835
02:16:34.740 --> 02:16:47.580
MS Analytics Class 2021: So there are a number of occasions in profit model where instead of just having a single cell as an unfair, we could think of having a block of cells as an array of implicit variables okay.

836
02:16:49.500 --> 02:16:51.090
MS Analytics Class 2021: So let me move on to.

837
02:16:52.260 --> 02:17:00.120
MS Analytics Class 2021: Declaring implicit variables, as my example i'll use an array that we've seen in the furniture making problem, and that is.

838
02:17:01.500 --> 02:17:17.550
MS Analytics Class 2021: How much of each resource was used by the solution alright, so we use hrs FT three lbs but they all measure, the same thing for a different resource slits glom them into an array.

839
02:17:18.480 --> 02:17:34.830
MS Analytics Class 2021: And the Clerk so here is in there for declaring an implicit variable the name of the implicit variable, but in this case, an index set if it's an array and then we have a defining expression.

840
02:17:36.450 --> 02:17:46.260
MS Analytics Class 2021: But it stands to reason that we want a different expression for each location in the index set right, we want to calculate exactly the same thing Labor Labor Labor metal metal metal.

841
02:17:47.160 --> 02:18:02.520
MS Analytics Class 2021: We want to make a calculation specific to each resource and in order to do that we use a local dummy parameter right, so it stands for a typical resource and the expression involves that resource okay.

842
02:18:03.540 --> 02:18:11.910
MS Analytics Class 2021: So in this case the expression is for think of that are being say Labor To begin with, it says, look at the.

843
02:18:12.480 --> 02:18:20.850
MS Analytics Class 2021: The the contribution to the usage of Labor for each product and then some that over all the products to get the total amount of Labor used in the model.

844
02:18:21.600 --> 02:18:26.730
MS Analytics Class 2021: Okay, and this does that calculation for Labor for metal and wood, so you can think of again.

845
02:18:27.240 --> 02:18:34.470
MS Analytics Class 2021: Think of it in a spreadsheet or similar and memory there's these locations that that store the amount used of Labor metal and wood.

846
02:18:35.190 --> 02:18:51.660
MS Analytics Class 2021: And initially they're all going to be zero because their values to be calculated from the values of the decision variables and those are initially all zero so if we had something else in the calculation, it might not be zeros, but in this case the calculates all the zeros.

847
02:18:53.340 --> 02:18:58.020
MS Analytics Class 2021: Okay, so let's let's try and do this on the fly just a little bit.

848
02:18:59.340 --> 02:19:18.240
MS Analytics Class 2021: over here i'm sorry I did the old speak newspeak is hrs becomes a mountain used of Labor again it's it's it's it's word, he has more syntax but it's more explicit it tells you exactly what it's doing calculating the amount of Labor that we're using in the model.

849
02:19:21.480 --> 02:19:29.400
MS Analytics Class 2021: And again, our MP local demi parameters i'm using different colors here to kind of distinguish them.

850
02:19:30.930 --> 02:19:37.920
MS Analytics Class 2021: In the editor if you get read that syntax error it's not good, here it just is a different color that i've chosen.

851
02:19:39.090 --> 02:19:43.980
MS Analytics Class 2021: These local me parameters would they be numbers or strings.

852
02:19:45.870 --> 02:19:59.640
MS Analytics Class 2021: hmm we'll go back to the index sets resources this set of strings so our as a string progress is a set of strings so piece of string alright, the compiler can tell from the the context here.

853
02:20:01.080 --> 02:20:08.490
MS Analytics Class 2021: Now you can think of this, so this declares an array of implicit variables.

854
02:20:09.540 --> 02:20:11.550
MS Analytics Class 2021: The compiler kind of unpack that.

855
02:20:12.690 --> 02:20:21.960
MS Analytics Class 2021: And so i'm taking the the the are that I had is read before and using the the color that the editor uses for strings because it's a string.

856
02:20:23.610 --> 02:20:41.850
MS Analytics Class 2021: So you can think of it as unpack to declare three different implicit variables, the not use the Labor not use a metal the mountains would and then, if you want to unpack it further, you can say Okay, the some unpacked to adding up different terms pluses.

857
02:20:42.870 --> 02:20:43.380
Right.

858
02:20:45.210 --> 02:20:48.120
MS Analytics Class 2021: Okay, so let's let's try and do this a little bit on the fly.

859
02:20:49.800 --> 02:20:51.480
MS Analytics Class 2021: here's the general syntax.

860
02:20:52.950 --> 02:20:58.560
MS Analytics Class 2021: name and index said if it's a an array and in defining expression.

861
02:20:59.910 --> 02:21:12.960
MS Analytics Class 2021: You can use in the defining expression for your implicit variable parameters, you can use decision variables, you can even use other implicit variables, as long as they're already defined, you can even do it recursive Lee.

862
02:21:14.550 --> 02:21:22.770
MS Analytics Class 2021: I don't have any examples of why you would use that in the course so but be aware that that is a possible thing that you could do.

863
02:21:25.110 --> 02:21:36.150
MS Analytics Class 2021: So what i'm going to do is i'm going to add a new implicit variable to the furniture making model that calculates the total cost, this is the same total cost that we had in the budget constraint.

864
02:21:37.200 --> 02:21:44.970
MS Analytics Class 2021: Right in the old version using explicit names and let me jump ahead just one slide before I do this as a DEMO.

865
02:21:47.130 --> 02:22:03.390
MS Analytics Class 2021: If I wanted to do it in the explicit names version I might do it like this in their total cost is equal to 14, which is the cost of Labor times hrs which is calculates the amount of Labor.

866
02:22:04.170 --> 02:22:16.260
MS Analytics Class 2021: times the cost of metal times lds times the cost of word times FT three this expression here was the same thing we had in a budget constraint right, that was the total cost.

867
02:22:18.240 --> 02:22:22.530
MS Analytics Class 2021: How does that translate to arrays an index sets.

868
02:22:23.760 --> 02:22:33.060
MS Analytics Class 2021: Well, the first step is that these values are stored in array called cost, and this is the cost of Labor.

869
02:22:34.860 --> 02:22:49.590
MS Analytics Class 2021: and using the implicit variables that we just define they are grouped into an array of implicit variables hrs is called the amount used of Labor and then in a third step.

870
02:22:51.030 --> 02:23:07.260
MS Analytics Class 2021: We do our calculation using a some and a local dummy parameter is used to play the role of Labor than metal than would okay so we'll end up with an expression that looks something like this.

871
02:23:08.430 --> 02:23:09.420
MS Analytics Class 2021: Let me go in.

872
02:23:22.230 --> 02:23:25.290
MS Analytics Class 2021: So she has an awesome movie music playing when it does that.

873
02:23:26.310 --> 02:23:29.640
MS Analytics Class 2021: it's if I can find the raw file, I want to use.

874
02:23:31.020 --> 02:23:31.890
MS Analytics Class 2021: OK.

875
02:23:37.200 --> 02:23:40.140
MS Analytics Class 2021: OK, so I believe in the demos, there is a.

876
02:23:41.910 --> 02:23:45.810
MS Analytics Class 2021: Partial version I can find it here we go furniture partial.

877
02:23:47.580 --> 02:23:55.020
MS Analytics Class 2021: So it has the kind of model built up to this point so we've declared our non prod variables.

878
02:23:56.370 --> 02:23:57.720
MS Analytics Class 2021: here's revenue.

879
02:23:58.740 --> 02:24:08.610
MS Analytics Class 2021: Okay, we saw that calculation before on the slide amount used, we saw that as an example, so now i'm going to define my implicit variable total cost.

880
02:24:09.450 --> 02:24:20.340
MS Analytics Class 2021: And you can kind of look above as a pattern for how the some expression looks right so first thing you're going to do is we're going to decide okay what.

881
02:24:21.540 --> 02:24:23.220
MS Analytics Class 2021: What are we going to be something over.

882
02:24:24.810 --> 02:24:38.490
MS Analytics Class 2021: So if you want to calculate the total cost it's The total cost of Labor plus the total cost, plus the cost of Labor plus the metal cost of wood so each of those is resources, so we start with resources.

883
02:24:41.040 --> 02:24:53.820
MS Analytics Class 2021: And in order to do the some CC how is kind of helping us here, we need a local dummy parameter that represents a typical resource, so an easy way to think about this is just to choose the first letter.

884
02:24:54.690 --> 02:25:09.630
MS Analytics Class 2021: It doesn't always work because maybe sometimes you have two things that both start with the same letter in the same expression but but lot of times, this is a an easy way to do it, it also helps you understand the calculation, because you can look at the arm think resource.

885
02:25:10.710 --> 02:25:16.140
MS Analytics Class 2021: Now, what do we want to multiply so as you saw on the side sequence, we had cost.

886
02:25:17.520 --> 02:25:23.430
MS Analytics Class 2021: All right, it's the cost what the cost of the resource he's a square bracket.

887
02:25:24.570 --> 02:25:36.060
MS Analytics Class 2021: And we multiply that times the amount used that's our implicit variable above amount used and again it's the not used of the resource.

888
02:25:37.680 --> 02:25:40.590
MS Analytics Class 2021: So you can see it's calculating it.

889
02:25:42.360 --> 02:25:50.040
MS Analytics Class 2021: Over it's something over a different set, but you can see the similarities square brackets the index of summation etc, etc.

890
02:25:51.300 --> 02:26:08.400
MS Analytics Class 2021: Now, how do we know if that's right, well, we can check, as we can expand it right and look at the expression see if it looks right The other thing we can do is, we can print it, and when we printed it or calculate the value now.

891
02:26:09.630 --> 02:26:20.910
MS Analytics Class 2021: If I if I don't initialize my decision variables they're all zero and almost any expression, you can come up with we'll also calculate out to zero, so I don't know if i'm in the right ballpark.

892
02:26:21.720 --> 02:26:31.230
MS Analytics Class 2021: i'm going to use it knit to initialize the value of my decision variables all to 30 the ballpark it might not be feasible but it's it's in the realm of possibility here.

893
02:26:32.400 --> 02:26:37.140
MS Analytics Class 2021: And if I got total cost right the total cost will be around 10,000.

894
02:26:38.550 --> 02:26:40.470
MS Analytics Class 2021: So let me go ahead and submit this.

895
02:26:44.220 --> 02:26:56.250
MS Analytics Class 2021: there's my expression right and see you see the values plugged in and the implicit variables and not use of Labor metal and wood looks pretty good.

896
02:26:56.970 --> 02:27:08.730
MS Analytics Class 2021: total cost ballpark around 10,000, this is actually more than the total value of all the resources that would tell you that is not going to be a feasible solution, but any rate we're in the right ballpark.

897
02:27:11.610 --> 02:27:21.420
MS Analytics Class 2021: Okay, let me make a few more remarks on the code again here's our first declare set some parameters, as I said before, if you wanted to you could add in.

898
02:27:23.100 --> 02:27:26.280
MS Analytics Class 2021: The carriage returns to make it look like a matrix.

899
02:27:27.600 --> 02:27:29.280
MS Analytics Class 2021: I can just illustrate that here.

900
02:27:30.570 --> 02:27:32.970
MS Analytics Class 2021: The compiler is perfectly happy with this format.

901
02:27:34.560 --> 02:27:42.450
MS Analytics Class 2021: The other thing I want to mention is that in this section, where I declare the variables is the order important.

902
02:27:44.760 --> 02:27:53.640
MS Analytics Class 2021: It is and we do have some flexibility let's look at this mean if I look at total cost.

903
02:27:54.840 --> 02:28:00.690
MS Analytics Class 2021: It involves amount used, which means amount us has to be declared before total cost.

904
02:28:01.740 --> 02:28:14.670
MS Analytics Class 2021: However, revenue only involves numb prod so revenue could be anywhere in here so there's some ordering that is required, and some ordering which you have some flexibility and.

905
02:28:15.240 --> 02:28:26.220
MS Analytics Class 2021: All right, the general rule is everything has to be declared before it's referred or used referred to, or use in the program Okay, so this this pocket model Program.

906
02:28:27.630 --> 02:28:34.020
MS Analytics Class 2021: fall short of building a model and doesn't have a solid statement right, so we have more work to do.

907
02:28:36.570 --> 02:28:38.160
MS Analytics Class 2021: Alright, so let's go back in.

908
02:28:40.350 --> 02:28:43.080
MS Analytics Class 2021: We have a few more elements that we need to flush out.

909
02:28:44.430 --> 02:28:46.200
MS Analytics Class 2021: Fortunately they're not as there's not as.

910
02:28:47.550 --> 02:28:51.330
MS Analytics Class 2021: as bad as the ones that we just saw in particular.

911
02:28:52.350 --> 02:28:56.820
MS Analytics Class 2021: In the case of the furniture making problem declaring the objective is is pretty straightforward.

912
02:28:58.050 --> 02:29:08.970
MS Analytics Class 2021: Now we've already declared implicit variable called revenue, we have another variable called total costs, the one we just did in the DEMO I showed you the slides for.

913
02:29:09.990 --> 02:29:26.040
MS Analytics Class 2021: So the net profit can be simply express as the difference between those two variables right you don't have to have a long expression doesn't have any sums it's just the difference between those two calculated values, so that the utility there is that the.

914
02:29:27.450 --> 02:29:42.840
MS Analytics Class 2021: Implicit variables calculate these intermediate quantities and if we define and explain and understand how revenue and total costs are calculated then it's easy to see the definition of net profit here so sense senses either maximum in.

915
02:29:44.070 --> 02:30:00.090
MS Analytics Class 2021: The name and an expression in this case it's pretty simple expression, and so you can imagine, again out in memory somewhere, there is location called net profit and initially its value is zero because, if all the decision variables are zero we don't make anything you don't make any money.

916
02:30:01.170 --> 02:30:14.130
MS Analytics Class 2021: But as the solver changes the values and the decision variables to get better and better solutions will see the value of net profit changing if we were able to visualize that that memory location.

917
02:30:15.990 --> 02:30:17.250
MS Analytics Class 2021: Okay, so like once.

918
02:30:19.860 --> 02:30:23.250
MS Analytics Class 2021: The general syntax match sermon.

919
02:30:24.570 --> 02:30:35.640
MS Analytics Class 2021: It allows you to have an array of objectives I have, I have failed to find over many years, and he really bonafide example where you would want.

920
02:30:36.120 --> 02:30:52.650
MS Analytics Class 2021: an array of objectives, the closest I can come to it as if you were looking at a lot of different scenarios and the scenarios were indexed by some set like scenario One scenario to scenario three but that's a kind of contrived example.

921
02:30:54.330 --> 02:31:04.230
MS Analytics Class 2021: So you can define multiple objective functions, and this is more common, even though it's rare to have an array of objectives multiple objectives are quite common.

922
02:31:06.480 --> 02:31:15.210
MS Analytics Class 2021: But there is not an optimization fairy that magically combines the objectives that you declare it's only going to optimize over one of them.

923
02:31:15.810 --> 02:31:24.480
MS Analytics Class 2021: And the way decides which one to optimize over is the most recent one either the most recently declared or the most recently used.

924
02:31:25.080 --> 02:31:36.720
MS Analytics Class 2021: And if that sounds confusing, you can always say after solve you can say either objective or Ob J and name the objective that you want to optimize.

925
02:31:37.290 --> 02:31:54.600
MS Analytics Class 2021: Okay, so you could have you could have revenue and net profit defined in the same problem as objectives and you could say solve lbj net profit and then you could after that say solve lbj revenue and see how the solutions were different.

926
02:31:57.390 --> 02:31:58.890
MS Analytics Class 2021: And then another useful thing is.

927
02:32:01.020 --> 02:32:08.340
MS Analytics Class 2021: You may or may not have occasion to use this is that you can refer to an objective in the same way that you can put a variable.

928
02:32:09.720 --> 02:32:15.930
MS Analytics Class 2021: In in building up something else, and the one way and this might be useful as you could say.

929
02:32:16.980 --> 02:32:21.150
MS Analytics Class 2021: Define your objective to be profit and then you could say.

930
02:32:22.950 --> 02:32:41.130
MS Analytics Class 2021: Max profit two equals profit plus something so you could modify your objected to a new objective by adding another term right using in the same way that we would reference implicit variables, if you think about it, the difference between an objective and an implicit variable is a direction.

931
02:32:42.270 --> 02:32:54.270
MS Analytics Class 2021: Right, but they say happiness is not a place it's a direction well an objective is like that, so instead of him, fair, it says maximum in but otherwise the syntax is the same to declare them.

932
02:32:55.290 --> 02:32:55.620
MS Analytics Class 2021: Okay.

933
02:32:58.230 --> 02:33:03.540
MS Analytics Class 2021: we've come a long way we have just a little bit more before we have our model all ready to go.

934
02:33:05.070 --> 02:33:07.260
MS Analytics Class 2021: The last element is the constraints.

935
02:33:08.280 --> 02:33:18.960
MS Analytics Class 2021: And in the furniture making problem we may or may not want to include the budget constraint, but we certainly have these resource availability constraints.

936
02:33:21.480 --> 02:33:33.270
MS Analytics Class 2021: So before they were called Labor metal and wood, but they all measured, the same thing, how much of a particular resource was used by the model so if we glommed them all together, we get a well.

937
02:33:34.680 --> 02:33:42.120
MS Analytics Class 2021: You could say, well, maybe an array of constraints, but constraints got a lot going on, and so, for that reason instead.

938
02:33:42.660 --> 02:33:51.330
MS Analytics Class 2021: They have various different quantities it's not just one number one value so we usually say a family of constraints, as you see, in the slide title.

939
02:33:52.320 --> 02:34:03.660
MS Analytics Class 2021: This is a family of constraints indexed by resources by that I mean there is a constraint for each resource usage of Labor usage of metal and the usage of wood.

940
02:34:04.620 --> 02:34:12.600
MS Analytics Class 2021: So I have con the name of my constraint family which i'm calling usage and index set and curly braces.

941
02:34:13.230 --> 02:34:31.590
MS Analytics Class 2021: And a local dummy parameter that allows me to specialize the definition to each resource in term and now with our implicit variables it's easy to formulate the constraints, the amount used a resource are is it most, the availability of resources are okay.

942
02:34:33.930 --> 02:34:42.750
MS Analytics Class 2021: So again, the utility of defining these implicit variables is they make other things that come later in the model easier to express.

943
02:34:44.400 --> 02:34:51.450
MS Analytics Class 2021: So our old constraint, which was called Labor is now called usage of Labor but it's the same thing.

944
02:34:53.760 --> 02:34:56.070
MS Analytics Class 2021: And, just like we do with the implicit variables.

945
02:34:58.230 --> 02:35:12.270
MS Analytics Class 2021: We have local dummy parameters and we can think about unpacking the declaration statement, so if I declare this index by resources means i'm declaring a constraint for each resource.

946
02:35:13.140 --> 02:35:23.760
MS Analytics Class 2021: And the compiler just plugs in the different resources Labor becomes Labor constraint metal and wood, so I have a constraint for each resource and pass it.

947
02:35:27.510 --> 02:35:28.440
MS Analytics Class 2021: in general.

948
02:35:29.640 --> 02:35:34.260
MS Analytics Class 2021: You can but I typically don't have a comma separated list of constraints.

949
02:35:35.490 --> 02:35:37.800
MS Analytics Class 2021: The constraint can be an equation.

950
02:35:38.940 --> 02:35:45.150
MS Analytics Class 2021: and inequality or a range constraint, this kind of sandwich constraint that I showed you before.

951
02:35:48.180 --> 02:36:02.820
MS Analytics Class 2021: You don't have to name your constraints, but it's smart to because you want to reference them if you don't name them they get a weird name generated automatically by proxy model underscore a con underscore stands for a nominal anonymous constraint.

952
02:36:04.230 --> 02:36:06.480
MS Analytics Class 2021: And then, it just starts enumerating them from one.

953
02:36:08.100 --> 02:36:08.760
MS Analytics Class 2021: So.

954
02:36:10.620 --> 02:36:19.950
MS Analytics Class 2021: Typically, you will have a name, you have an index that if it's a family, and not just a single constraint and then different types of constraints.

955
02:36:20.520 --> 02:36:29.490
MS Analytics Class 2021: So we'll see going forward that this gives us a lot of flexibility and how we define our constraints, think about the equation here.

956
02:36:30.060 --> 02:36:38.880
MS Analytics Class 2021: These expressions could be variable expressions both of them doesn't have to just be a body in a limit it could be supply equals demand.

957
02:36:39.630 --> 02:36:52.410
MS Analytics Class 2021: or production equals demand likewise for an inequality for a range constraint, we have to be a little bit more picky, we have to actually have bounds, which are numeric expressions on the top and the bottom.

958
02:36:57.660 --> 02:36:58.890
MS Analytics Class 2021: So we're at that point.

959
02:37:00.210 --> 02:37:10.770
MS Analytics Class 2021: So we've kind of built this up as an example of the different types of model elements declared using a raising index sets and now we're ready to see it in action.

960
02:37:16.410 --> 02:37:19.860
MS Analytics Class 2021: So i'm going to open up furniture arrays.

961
02:37:25.230 --> 02:37:36.840
MS Analytics Class 2021: Again it's we start off first declaring sets in parameters sets easily are declared before parameters, although we just have to follow that general rule that everything is declared before it's used.

962
02:37:38.790 --> 02:37:46.860
MS Analytics Class 2021: Then our variables decision variables implicit variables, I talked a little bit about the flexibility we have in doing things in different orders here.

963
02:37:48.270 --> 02:37:50.370
MS Analytics Class 2021: Are constraints are objective.

964
02:37:51.840 --> 02:37:56.550
MS Analytics Class 2021: And here i'm going to kind of illustrate the different possibilities for expand.

965
02:37:58.020 --> 02:38:07.740
MS Analytics Class 2021: We can say expanding at the whole model what this is doing is it's giving us just that section of the model, which consists of the variables in the implicit variables.

966
02:38:08.760 --> 02:38:18.330
MS Analytics Class 2021: Then we're expanding just net profit, which is our objective and then we're expanding usage, I had not included the budget constraint in this.

967
02:38:18.780 --> 02:38:27.900
MS Analytics Class 2021: version of the furniture making problem so that's basically that's the whole model right there that just using the different functionality of the expense statement.

968
02:38:28.800 --> 02:38:40.170
MS Analytics Class 2021: solve it print, the solution, which is the decision variables non prod and the amount used, which is how much of each resource we use, which was what we printed before.

969
02:38:41.220 --> 02:38:43.440
MS Analytics Class 2021: So let's execute this.

970
02:38:48.570 --> 02:38:50.850
MS Analytics Class 2021: So here's the expand.

971
02:38:51.960 --> 02:39:04.860
MS Analytics Class 2021: The expanded model, you can see, as I mentioned previously, before the compiler is a little bit taking liberties, here it doesn't have chairs in quotation marks okay.

972
02:39:06.180 --> 02:39:23.400
MS Analytics Class 2021: It just thinks that you're smart enough to figure it out, which is kind of a double standard because it requires you to use the quotes are implicit variables and again, as we saw before it's substitutes the values in for the parameter values right.

973
02:39:25.320 --> 02:39:30.210
MS Analytics Class 2021: And here is yeah and we'd find the total cost here we go.

974
02:39:31.380 --> 02:39:36.420
MS Analytics Class 2021: separated out in three sections, this is the same thing that you would get if you just expanding that the whole model.

975
02:39:40.440 --> 02:39:57.780
MS Analytics Class 2021: now think back to when we had the explicit names versions furniture names this problem summary is exactly the same linear objective for variables bounded both bounded below three constraints they're all less than or equal to constraints.

976
02:39:58.950 --> 02:40:03.810
MS Analytics Class 2021: Those problems summaries are indistinguishable Okay, what about the solution.

977
02:40:08.460 --> 02:40:17.550
MS Analytics Class 2021: This again will be the same is the same model that's being solved it's just that, when you compare the expanse statements between the two.

978
02:40:18.420 --> 02:40:30.720
MS Analytics Class 2021: The names for the decision variables, the implicit variables, the constraints are all using a raise an index sets as opposed to explicitly entered with names.

979
02:40:31.440 --> 02:40:45.000
MS Analytics Class 2021: So it's solving the same model it's just this is a way to formulate the model that will allow us to read data from SAS data sets that is an essential feature going forward, otherwise we would be very limited to solving.

980
02:40:46.260 --> 02:40:51.540
MS Analytics Class 2021: Just little tiny small models so if you find this syntax.

981
02:40:52.740 --> 02:40:59.370
MS Analytics Class 2021: To be kind of abstract and confusing that's to be expected, what I would suggest to you is that you open up.

982
02:41:00.390 --> 02:41:02.130
MS Analytics Class 2021: Say furniture in there.

983
02:41:03.960 --> 02:41:05.610
MS Analytics Class 2021: and furniture arrays.

984
02:41:06.780 --> 02:41:08.430
MS Analytics Class 2021: kind of put them side by side.

985
02:41:12.150 --> 02:41:30.780
MS Analytics Class 2021: And just compare them, the way the syntax looks in one, the way the syntax looks in the other, and we have a few things that we've defined in furniture arrays that we haven't defined in furniture in fair like, here we don't have as many implicit variables, you can enter them into.

986
02:41:31.860 --> 02:41:41.880
MS Analytics Class 2021: This furniture impairs you we've seen them kind of developed in the slide so that you shouldn't be hard to figure out just put them side by side and compare.

987
02:41:43.380 --> 02:41:56.220
MS Analytics Class 2021: Because they're solving the same model it's just that one of them is using a syntax it's just a little bit more abstract well no it's using syntax it's a lot more abstract and it's going to take some getting used to.

988
02:41:57.840 --> 02:41:58.800
MS Analytics Class 2021: Hopefully.

989
02:41:59.820 --> 02:42:11.340
MS Analytics Class 2021: Using this small example that I gave you in the homework will allow you to try and take the elements from furniture arrays and apply them to that small.

990
02:42:13.380 --> 02:42:27.510
MS Analytics Class 2021: brewing problem it's it's simpler than this is see, but you can use some of the elements of furniture arrays to formulate that problem, and you have again one version with names.

991
02:42:28.140 --> 02:42:42.810
MS Analytics Class 2021: And you're going to come up with a version that looks very similar to this where you'll be looking at declaring set some parameters initializing your parameter arrays and then building your model using this kind of.

992
02:42:44.490 --> 02:42:45.480
MS Analytics Class 2021: indexing.

993
02:42:47.250 --> 02:42:51.000
MS Analytics Class 2021: For for decision variables constraints, etc.

994
02:42:53.190 --> 02:42:54.210
MS Analytics Class 2021: Alright, so.

995
02:42:58.590 --> 02:43:00.540
MS Analytics Class 2021: If we go back to our friend.

996
02:43:03.120 --> 02:43:04.920
MS Analytics Class 2021: This product mix model.

997
02:43:06.270 --> 02:43:09.960
MS Analytics Class 2021: Again, now we have a little bit, we have more language to attach to this.

998
02:43:11.310 --> 02:43:23.880
MS Analytics Class 2021: So, in a larger product mix model where we might have again hundreds of products and dozens of different resources they can we have the same structure we have sets.

999
02:43:25.440 --> 02:43:31.770
MS Analytics Class 2021: And parameter arrays and so if we looked at a large product mix problem.

1000
02:43:33.270 --> 02:43:45.090
MS Analytics Class 2021: And compared the data, the data for that large from we much larger than data for the furniture making problem, but if you think about the model itself.

1001
02:43:46.170 --> 02:43:57.120
MS Analytics Class 2021: It would be using the same model, so the the model using index that's in arrays doesn't get bigger just because there's more data.

1002
02:43:57.780 --> 02:44:06.540
MS Analytics Class 2021: Right it's exactly the same model with the summations and so forth, so the models that we come up with using arrays an index sets are scalable.

1003
02:44:07.140 --> 02:44:18.750
MS Analytics Class 2021: Right you model, the toy problem it works, then you can read in the big data set and solve solve larger problem, using the same exact model and we'll see many examples of that.

1004
02:44:19.470 --> 02:44:33.060
MS Analytics Class 2021: And so, now we have a way to talk about the decision variables as non prod an array of decision variables right and if you're interested in the course notes, there is an example of a product mix problem.

1005
02:44:34.440 --> 02:44:52.920
MS Analytics Class 2021: That involves organic potting soils that's again uses has the same structure, but just slightly larger data so product mix problem doesn't always have to be about furniture can be many different types of production and to some extent.

1006
02:44:53.970 --> 02:45:10.710
MS Analytics Class 2021: Your your brewery problem fits into this same setup it's just simpler, because in the in the example that you have in the homework there's there's no costs okay so that's been kind of simplified out of the problem, but same basic structure.

1007
02:45:12.870 --> 02:45:15.720
MS Analytics Class 2021: Okay, so i'll stop there, we go.

1008
02:45:17.010 --> 02:45:21.180
Fireman, Karen: Excuse me, Sir, where did you see where did you say that parting problem is.

1009
02:45:22.110 --> 02:45:23.550
MS Analytics Class 2021: it's in the course notes.

1010
02:45:25.650 --> 02:45:27.240
MS Analytics Class 2021: And it is.

1011
02:45:29.160 --> 02:45:40.860
MS Analytics Class 2021: probably better to wait until we can read data from SAS data sets because that's the form that it takes, but if you want to look ahead it's in the next section in Chapter two so.

1012
02:45:42.090 --> 02:45:54.750
MS Analytics Class 2021: i'm not going to try and go back all the way to the beginning of the slides, but you can look at the the the there's five sections in Chapter two so we're just finishing up the second section it'd be in the third.

1013
02:45:55.860 --> 02:45:57.600
MS Analytics Class 2021: will touch on.

1014
02:45:58.920 --> 02:46:01.800
MS Analytics Class 2021: Reading data from SAS data sets in the next.

1015
02:46:02.880 --> 02:46:15.750
MS Analytics Class 2021: lecture and so you might want to wait until then, but you can look at it, if you want it's just that, instead of being initialized the data is read from SAS data sets so that's going to be the major difference there.

1016
02:46:20.700 --> 02:46:21.000
Fireman, Karen: Any.

1017
02:46:21.660 --> 02:46:23.520
MS Analytics Class 2021: Other questions.

1018
02:46:26.370 --> 02:46:34.260
MS Analytics Class 2021: So if you have difficulties with the syntax I feel free to join me for office hours on Monday, but.

1019
02:46:35.160 --> 02:46:54.060
MS Analytics Class 2021: If I realized that you may not have generated all of your syntax errors by Monday if you're getting some strange errors and you don't understand where they're coming from just send me send me your code, you can email me with your question.

1020
02:46:56.370 --> 02:47:05.340
MS Analytics Class 2021: At this point, it's probably just the code is enough, but as we move forward and we start using data sets and so forth.

1021
02:47:05.790 --> 02:47:16.950
MS Analytics Class 2021: You might need to send a little bit more, you might need to send you know, like your your data sets your code and something that customer support always asked words, they say, send a log file.

1022
02:47:18.090 --> 02:47:27.780
MS Analytics Class 2021: And so you can see that incest studio you have functionality to save those things, so you can save the log as a text file and included in an email.

1023
02:47:28.380 --> 02:47:38.310
MS Analytics Class 2021: But for now if you're having problems, the syntax errors, I would say just send the program if you want to send the law, because the law has the trains to explain the syntax errors.

1024
02:47:38.790 --> 02:47:45.510
MS Analytics Class 2021: I can help you kind of parse that if you send the log as well, but i'd be happy to help you, with your syntax errors because.

1025
02:47:46.350 --> 02:48:06.690
MS Analytics Class 2021: It is a lot of syntax to start out with all at once, and it gets easier, as you see it reinforced from one model to a new model to a new model to a new model, but right now it's just a lot it's like two smoking barrels right lock, stock and two smoking barrels.

1026
02:48:08.070 --> 02:48:23.040
MS Analytics Class 2021: So so email me if you have problems i'd rather not have you struggle with it for for four hours and then give up just you know if you get to a point that sticky send me an email i'll try and reply back to you quickly, so you don't lose time right.

1027
02:48:24.720 --> 02:48:25.320
MS Analytics Class 2021: Okay.

1028
02:48:28.050 --> 02:48:28.680
MS Analytics Class 2021: sure.

1029
02:49:01.980 --> 02:49:05.190
Jordan Gross: Thank you, Professor take care, thank you.

1030
02:49:06.150 --> 02:49:07.110
Fireman, Karen: Thank you so much, sir.

